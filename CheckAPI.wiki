= CheckAPI =

CheckAPI is used to check for behavioral differences between implementations of Repy V2 on various supported hardware. This document serves as a guide on how to use CheckAPI, additionally it covers its current limitations. 

'''*This document is not complete yet, there will be more added soon*'''

----
[[TOC(inline)]]
----

[[BR]]

== Using CheckAPI ==

CheckAPI's primary version uses security layers to interpose on API calls, log them and then verify them against a model of the API. The first step in using CheckAPI is to copy all of the required files from https://seattle.cs.washington.edu/browser/seattle/branches/repy_v2/checkapi/ into a directory that contains all of the required Repy V2 files. This can be done via preparetest.py

If the application you are running with CheckAPI will try and '''open any existing files''' in the filesystem they must be added to the check_api_initial_filestate.input file that is used at initialization time of CheckAPI. If this is not done then the model will not know that a given file exists but the implementation will and this will result in a conformance failure.

{{{
python preparetest.py -checkapi <directory_name>
}}}


After this you can run any application that supports Repy V2 with CheckAPI with the following command:

{{{
python repy.py <restrictions file> encasementlib.repy dylink.repy check_api.repy <program under test>
}}}


== Current Limitations == 

'''Garbage Collection:''' [[BR]][[BR]]
Application code that relies on Python to garbage collect an object and implicitly close it for you is not current supported. If an application calls openfile() and does not store it into any variable the file will remain open until the program exits. This is because of a number of reasons:
 * In order for this to work properly the __del__ function must be overridden in wrapper functions for objects such as the file-descriptor object returned by openfile.
 * However, the only time __del__ is called internally by Python is when there are no references to the object in memory. Currently, references to these objects are stored in the ongoing trace. They will be cleared out once the systolic buffer is cleared and/or when the program exits.
 * This may be fixed by adding the __del__ functions and by changing the way CheckAPI deals with objects. I believe I can remove the storage of the object reference themselves and just log the initial object id. More testing is required to implement and check this in.

A prime example of this incorrect behavior is seen in the unit test: ut_repyv2api_removefileperformsresourceaccounting.py
