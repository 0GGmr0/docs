= What is huxiang? =

Taking advantage of the ability to register a domain name for a node's IP address through [wiki:Zenodotus zenodotus], you can host your own website through one of Seattle's nodes. By following the listed instructions and providing the application your SeattleGENI public and private key, as well as the directory path to the folder containing files that make up the website, your website will be up for three hours unless you renew the vessels you borrowed (see the section on "Renewing Hosting")

== Requirements ==
 * A Linux operating system
 * [http://chandlerproject.org/bin/view/Projects/MeTooCrypto M2Crypto] installed

== Setting Up ==
 1. If you haven't done so already, to ensure you will have the necessary credits to use Seattle's P2P resources, download the version of Seattle appropriate to your operating system [https://seattlegeni.cs.washington.edu/geni/download/flibble/ here], and follow the instructions on installing and starting it up.

 2. Next, download the Seattle demokit [http://seattlegeni.cs.washington.edu/dist/demokit.zip here] and extract the files to its default folder "demokit"

 3. Download the tarball file listed at the end of this page and extract its contents into the same folder as your Seattle demokit.

 4. Whether than keeping the recently extracted files in a separate folder within the demokit, move a copy of each file into the main demokit folder.

 5. If you haven't done so already, register for a public and private key for SeattleGENI [https://seattlegeni.cs.washington.edu/geni/html/register here], and download the publickey and privatekey file into your demokit's folder

 6. Within the demokit folder, follow the instructions in setting up the Experiment Library [wiki:Libraries/ExperimentLibrary here].

 * There should now be a folder called "!ExperimentLibrary" in the demokit folder.

 7. Create a new folder within the same demokit, and store in it all the web files that will be incorporated into the hosted website. This can include HTML, CSS, image files, etc.
 * IMPORTANT: Make sure you have an "index.html" file that will act as the homepage for your hosting site
 * Note: Also, make sure address linking between files are based on relative directory, not absolute URLs.

 For example, instead of using:
{{{
<a href="https://seattle.cs.washington.edu/html/index.html">Home Page</a>
}}}
 for a link to the home page, change it to:
{{{
<a href="index.html">Home Page</a>
}}}
 ...instead.

 8. In the seattlegeni_xmlrpc.py file within the !ExperimentLib folder, set the value of CA_CERTIFICATES_FILE to the location of a PEM file containing CA certificates that you trust. Alternatively, if you don't know where this is on your own system, download this file from trustworthy site into the demokit folder. One such place to download this file is [http://curl.haxx.se/ca/cacert.pem here]


== Hosting the Site ==
The main file you will be using is huxiang_creator.py, while huxiang_server.repy will handle the server side of things for the hosted website. If you want to make any changes to the server's callback function in handling HTTP requests, edits in code and functionality can be made to huxiang_client.repy before recompiling the file into huxiang_server.repy.
If you made any changes to huxiang_client.repy, be sure to pre-process the file through [wiki:SeattleLib/repypp.py repypp.py] with the command:
{{{
$ python repypp.py huxiang_client.repy huxiang_server.repy
}}}
or else the website hosting behavior will not reflect the changes you made.

Otherwise, the huxiang_server.repy included in the tarball should work fine.

Run huxiang_creator.py with the following five arguments:

  - A single-word string used to set part of the hosted website's home address. It cannot include any spaces or symbols

  - Directory path of the publickey file you're using, relative to the folder you're running the application from (or just the name of the publickey file if it's located in the current folder)

  - Directory path of the privatekey file of the same keyname.

  - Directory path of the file folder holding the web site files you're hosting.

As an example of how the command should look:
{{{
$ python huxiang_creator.py example guest.publickey guest.privatekey ./example_web_site
}}}
With the above command, all the files within the folder 'example_web_site' will be hosted on all the nodes currently owned by 'guest' at the address 'example.zenodotus.cs.washington.edu'. For a user to access the site, the URL the person would browse for is 'example.zenodotus.cs.washington.edu:(port number)', where (port number) is the 63--- port number assigned to "guest". It is important that you include the arguments in the order listed above or else the application will throw an error.


The only way to check the status of the nodes hosting the website is manually through the experiment manager seash. Any error messages that gets printed out can be found in the respective node's log, displayed with the command 'show log'


== Renewing Hosting ==
To renew your website hosting up to a week's period of time, follow these instructions: 
 1. Log on to your SeattleGENI account [http://seattlegeni.cs.washington.edu/ here]
 2. Once logged in, go to the "My Vessels" tab on the page
 3. Under the "My Vessels" tab, there should be a list of all vessels you currently own and the amount of time before they expire. Click the "renew all" button at the top of the rightmost column.
 4. Expiration time should now reset to roughly seven days.


== Restrictions ==
There are a few restrictions that users must be aware of when hosting websites through huxiang:
  - The home folder of the web files being uploaded must contain an "index.html" that will act as the homepage of the website

  - As stated above, links between pages hosted on the same server must be relative addresses instead of solid ones

== Troubleshooting ==
'''All of the nodes are timing out when trying to upload huxiang_server.repy'''
 A solution is currently being worked on to resolve the timeout issue. For now, if none of the acquired vessels worked, release them all through the [http://seattlegeni.cs.washington.edu/ SeattleGENI] and try running huxiang_creator.py again.

'''How do I install M2Crypto?'''
 (for Ubuntu ver 10.04 and later) You can simply install the required package through the command:
{{{
$ sudo apt-get install python-m2crypto
}}}
 Otherwise, for more details, check the link provided above.
 

'''I can't access the hosted website, but the hosting node says it's running just fine.'''
 Make sure you inputted the URL of the hosted site into your browser correctly. Also, there may be a variable amount of delay between execution of the application to the web site actually being accessible through a browser. 

'''One of the images are missing on the site, but I'm pretty sure I downloaded all of the required files to host the web page separately'''
 A common issue with the "Save Page as..." function of browsers is the inability to save images used in the CSS style sheet. The only way to circumvent this at the moment is to manually save the images into the same folder as the rest of the web page's file contents.


== Other Currently Known Problems ==
 - Doing a "?location" query request occasionally results in a page displaying "httpserver: Callback function raised an exception: Function 'openconn' called with incorrect arguments. Arguments were args:('geoip.cs.washington.edu', 12679, None, None, None), kwargs:{}" that also breaks the site for that hosting node.

== Further Information ==

Further information about advertise_announce, settimer, and _rehost_callback can be found at the [wiki:Zenodotus zenodotus] page.

Basically, when running in a node, this will associate the set zenodotus address with the node's IP Address. When a user types in the address along with your respective port number into the browser, they will automatically be directed to the home page of the site. Any further URL requests will result in the server doing a check to see that the requested path matches the site map's configuration, and either send back the web file associated with page requested or display an error message.

Also, when a user requests a query for the location of the node by adding "?location" into anywhere in the path, the server will automatically bring up a frame at the top of the page displaying the coordinates of the node and its location, if available.

Note that the code is still in the middle of development, and it should become much more user friendly in the future.


