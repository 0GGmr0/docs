== What is it? ==

Taking advantage of the ability to register a domain name for a node's IP address through [wiki:Zenodotus zenodotus], you can host your own website through one of Seattle's nodes. By simply modifying the provided REPY file to fit your website's structure, the process is as simple as running the program on one of your nodes and passing it your respective SeattleGENI port number for the argument.



== How do I use it? ==

General instructions for use are as follows:

First, download the tarball file listed at the end of this page and extract its contents into the same folder as your Seattle demokit. The main file you will be using is huxiang_creator.py, which will handle the rest of the files. huxiang_server.repy is basically a compiled version of huxiang_client.repy, so if you want to make any changes to how HTTP requests are handled, all edits should be made to huxiang_client.repy before re-compiling as huxiang_server.repy, which is further explained in the steps below.

Within the demokit folder, follow the instructions in setting up the Experimental Library [wiki:ExperimentLibrary here]. There should now be a folder called "ExperimentalLibrary" in the demokit folder. Also, to keep things simple, keep a copy of your publickey and privatekey file within the demokit folder

Create a new folder within the same demokit, and store in it all the web files that will be incorporated into the hosted website. This can include HTML, CSS, image files, etc. Note that in the HTML coding, make sure address linking between files are based on relative directory, not solid addresses.
For example, instead of using:
{{{
<a href="https://seattle.cs.washington.edu/html/index.html">Home Page</a>
}}}
for a link to the home page, change it to:
{{{
<a href="index.html">Home Page</a>
}}}
...instead.

If you made any changes to huxiang_client.repy, pre-process the file through [wiki:SeattleLib/repypp.py repypp.py] and output it as huxiang_server.repy. Otherwise, the huxiang_server.repy included in the tarball should work fine.

Making sure the keyname you're using owns at least one vessel, run huxiang_creator.py with the following five arguments:

  - The GENI port number (63xxx) associated with the keyname you're using

  - A single word string that will be used as part of the ".zenodotus.cs.washington.edu" address your site will be hosted under

  - Directory path of the publickey file you're using relative to the current folder you're running the program (or just the name of the publickey file if it's located in the current folder)

  - Directory path of the privatekey file of the same keyname.

  - Directory path of the file folder holding the web site files you're hosting.

As an example of how the command should look:
{{{
$ python huxiang_creator.py 63111 example guest.publickey guest.privatekey ./example_web_site
}}}
With the above command, all the files within the folder 'example_web_site' will be hosted on all the nodes currently owned by 'guest' through the GENI port 63111 at the address 'example.zenodotus.cs.washington.edu'. For a user to access the site, the URL the person would browse for is 'example.zenodotus.cs.washington.edu:6311'. It is important that you include the arguments in the order listed above, or the program will not run correctly.


There may be a variable amount of time delay between execution of the program to the web site actually being accessible through a browser. The only way to check the status of the nodes hosting the website is manually through the experiment manager seash. Any error messages that gets printed out can be found in the respective node's log, displayed with the command 'show log'



== Further Information ==

Further information about advertise_announce, settimer, and _rehost_callback can be found at the [wiki:Zenodotus zenodotus] page.

Basically, when running in a node, this will associate the set zenodotus address with the node's IP Address. When a user types in the address along with your respective port number into the browser, they will automatically be directed to the home page of the site. Any further URL requests will result in the server doing a check to see that the requested path matches the site map's configuration, and either send back the web file associated with page requested or display an error message.

Also, when a user requests a query for the location of the node by adding "?location" into anywhere in the path, the server will automatically bring up a frame at the top of the page displaying the coordinates of the node and its location, if available.

Note that the code is still in the middle of development, and it should become much more user friendly in the future.


