= Design Goals =

  * Greater understandability and maintainability.
    * Current design is more difficult than necessary for new people to understand.
  * Easier testing.
    * Current design's lack of modularity makes testing difficult.
  * Better logging.
    * Design not only needs to incorporate better logging, but needs to allow easy future addition of logging.
  * Eliminate race condition.
    * Current implementation has various race conditions related to database access (e.g. I believe the potential for the same key from keys_512 to be assigned to multiple users).
    * It is likely that locking at the database level needs to be done in certain situations.
  * Eliminate the need for a separate backend xmlrpc server.
    * Current design makes use of a separate xmlrpc server to synchronize some database and nodemanager operations related to vessel assignment.
      * This is an additional potential point of failure.
      * If there were a security argument for this, it could be worth it (e.g. certain keys are not accessible to the !GeniPortal and the backend xmlrpc server that has access to them runs on a different server)
    * If the necessary synchronization can be done without this separate server, it should be.

= New Design Plan =

We'll split the system up into three main components: Frontends, Controller, and Backend.

[[Image(seattlegeni-rewrite-structure.gif)]]

== Frontends ==

A way in which the !GeniPortal is interacted with. Two planned frontends will be HTML (the website) and XML-RPC.

== Controller ==

The "middle" between the Frontend and Backend. The brunt of the logic goes here. The various frontends make calls to functions in a single interface module in the controller. These interface functions then directly or indirectly make calls to backend functions.

== Backend ==

Where most of the dirty work will be kept for database modification and node communication.

= Logging =

Logging will be available in multiple ways:
  * Request/Response available via [http://docs.djangoproject.com/en/dev/topics/http/middleware/ django middleware].
  * Logging at the controller interface (allows logging requests/response, recording time, etc. independent of frontend).
  * Use of the python logger module (no calls to "print", ever).
  * Email critical errors to developers (include request/response information).

Ultimately, various logged information should be summarized and available through a website so that the status of the site can be easily monitored. This would include details of exceptions, number of types of requests, average request times for different requests, etc.
 
= Testing =

  * Unit tests:
    * frontends (using [http://docs.djangoproject.com/en/dev/topics/testing/ django test framework])
    * controller interface
    * controller additional logic
    * backend db
    * backend nodemanager api
  * Test data:
    * make use of [http://docs.djangoproject.com/en/dev/topics/testing/#fixture-loading fixtures in django]
  * Dependency injection to increase testability using mock objects:
    * at least in backend database and nodemanager so that, for example, other functions that ultimately result in node communication can be tested without actual node communication.

= Models =

  * User

  * Donation

  * Vessel

  * !VesselPort

  * !VesselUserMap

== Model Notes ==

  * '''Vessel ownership/acquisition''': If a user acquires a vessel, the user is considered the owner. The vessel counts towards that user's vessel limit.
  * '''Vessel multi-user access''': A vessel can be accessible to multiple users even though it is always owned by a single user. The users with access to the vessel are not allowed to release the vessel, though they can remove themselves from it so that they no longer have access. This is mostly future-proofing, as this version of the !GeniPortal currently does not include mechanisms by which additional users can be given access to a vessel. The idea is to keep this part in mind for the design at this stage.
  * '''Sharing''': allowing other users to create vessels against your vessel credits is not re-incorporated in the design at this time. Note: jsamuel needs to discuss the sharing model more with justinc.

= Synchronization =

TODO: discuss database table and row locking.

