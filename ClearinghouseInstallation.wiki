= Seattle Clearinghouse Installation How-To =

This document explains how to do a fresh install of the Seattle Clearinghouse portal on
a machine that is running a Debian-like Linux operating system such as Ubuntu.

You might want to take a look at the [wiki:UnderstandingSeattle/SeattleInfrastructureArchitecture Seattle infrastructure architecture] documentation before proceeding. This also mentions the other two infrastructure components of Seattle Testbed, the Custom Installer Builder and the software update server, and talk about their interfacing with the Clearinghouse.

----
[[TOC(inline)]]
----

== Setting up a non-privileged user account ==
First of all, we recommend to set up a user account specific to the Clearinghouse instance you are going to set up. This ensures all of the code, config files, etc. remain isolated from that of other services on the same machine.

The user ''should not be granted interactive login'' for security reasons. Use `sudo -i -u theusername` instead to work in their directory. Needless to say, the user ''should not have root privileges'' or be able to acquire them.

Any user name will be fine. We'll use `ch` in the instructions.



== Install Dependencies ==
----

Clearinghouse requires at least the following software to be installed:
 
 * [http://www.python.org/ Python] in version 2.6, or 2.7 -- the language Seattle Clearinghouse is written in
 * [http://mysql-python.sourceforge.net/ Python MySQLDB] -- the python mysql interface
 * [http://www.mysql.com/ MySQL] -- the database
 * [http://www.apache.org/ Apache] -- the web server
 * [http://www.modwsgi.org/ mod_wsgi] -- necessary for interfacing with Django code
 * [http://www.openssl.org/ OpenSSL] -- necessary for `https://` support
 * [http://www.djangoproject.com/ Django] in version 1.6.x -- necessary to run Django code
 * [https://github.com/omab/django-social-auth Django Social Auth] -- for OpenID and Oauth support.

Most of these can be installed through a package manager. For example, on a Debian-based system:

{{{
#!sh
$ sudo apt-get install apache2 libapache2-mod-wsgi
$ sudo apt-get install mysql-server mysql-client python-mysqldb
$ # MySQL will prompt you to set a root database password, which you should do.
$ sudo apt-get install ntp
$ sudo apt-get install openssl
}}}

Django, the web framework the clearinghouse uses, is available at https://www.djangoproject.com/download/ or through a package manager. Please note that we currently support the 1.6 line only.
{{{
#!sh
$ pip install django==1.6.7
}}}
Depending on your actual OS and setup, this command might require `sudo` privileges.

Note that even if you don't enable OpenID and OAuth, Clearinghouse requires the specific Django package installed:

{{{
$ easy_install django-social-auth
}}}


== Optional: Setup OpenID and OAuth ==
If you would like your Clearinghouse to support login not only through user accounts it manages itself, but ID/authentication services like OpenID and OAuth, or web services like Google, Facebook, or !GitHub, take a look at the [wiki:ClearinghouseSocialAuth social auth support instructions page].



== Create MySQL databases ==

You need two mysql databases and seperate users with access to each.
  * First database name: `clearinghouse`
  * Second database name: `keydb`

For simplicity, make the database usernames correspond to the database names.

Here's an example of creating a database and a user:

{{{
#!sh
$ mysql -u root -p
$ # This requires entering the database root password set during install!

mysql> create database clearinghouse;

mysql> GRANT ALL PRIVILEGES 
ON clearinghouse.* 
TO 'clearinghouse'@'localhost'
IDENTIFIED BY 'desired password for clearinghouse';

mysql> create database keydb;

mysql> GRANT ALL PRIVILEGES 
ON keydb.* 
TO 'keydb'@'localhost'
IDENTIFIED BY 'desired password for keydb';
}}}
where you would replace the password strings with suitable ones. Afterwards, type `\q` to leave the MySQL prompt:

{{{
#!sh
mysql> \q
Bye!
$ 
}}}



== Deploying and running Clearinghouse ==
In this section, we will deploy and run a copy of the Clearinghouse from your current user account in a temporary directory. This is mainly useful for testing. For an actual deployment, we recommend setting up a separate user account, e.g. named {{{clearinghouse}}}, and following the steps below as this user.

  * '''Initial preparation'''
    * Change to the clearinghouse user account: `sudo -i -u ch`
    * Clone the Clearinghouse repository into `ch`'s home directory, and let the initialize script fetch dependencies:
{{{
#!sh
$ cd ~
$ git clone https://github.com/SeattleTestbed/clearinghouse.git
$ cd clearinghouse/scripts
$ python initialize.py
}}}
    * Deploy all necessary files to a directory of your choice. We'll use `~/deployment` (a directory called `deployment` under the clearinghouse user's account) in these instructions. You'll need to give two arguments to the deployment script: The parent directory of the `clearinghouse` repo you checked out, and a directory you want to deploy to. (In case the latter exists, you will be asked if you want a backup to be created.) For example:
{{{
#!sh
$ python ~/clearinghouse/deploymentscripts/deploy_clearinghouse.py ~ ~/deployment
}}}


    * Deploy the Repy runtime. Create a `seattle` directory within `deployment` (where the deployed `clearinghouse` dir already exists), and run the build script.
{{{
#!sh
$ mkdir ~/deployment/seattle
$ cd ~/clearinghouse/scripts
$ python build.py ~/deployment/seattle
}}}
[[BR]]

  * The Seattle [wiki:SeattleBackend backend scripts] require a set of public keys (called ''state keys'') to work. From the `seattle` runtime directory created and populated earlier, make runnable and then run the script that will generate state keys for you:
 
{{{
#!sh
$ cd ~/deployment/seattle
$ chmod +x generate_state_keys.sh
$ ./generate_state_keys.sh ../clearinghouse/node_state_transitions/statekeys
}}}
    * Note that only the `*.publickey` files are required for the clearinghouse. You can safely remove the `*.privatekey`s from `~/deployment/clearinghouse/node_state_transitions/statekeys`.


  * '''Setup the website and start a development version of it'''
    * Be sure you've already created a MySQL database for the clearinghouse (e.g.
      called `clearinghouse`).
    * Edit the configuration file for the clearinghouse Django project, `~/deployment/clearinghouse/website/settings.py`:
      * The clearinghouse database name and credentials in the `DATABASES` dict.
{{{
# Database
# https://docs.djangoproject.com/en/1.6/ref/settings/#databases
DATABASES = {
    'default': {
        # you can use django.db.backends.sqlite3 instead of mysql. If you
        # decide to do so, you can leave the other fields empty
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'clearinghouse',
        'USER': 'clearinghouse',
        'PASSWORD': 'the user\'s password',
        'HOST': '',
        'PORT': '',
    }
}
}}}


      * Set `SECRET_KEY` to a long, random string.
      * If this is a production launch, also set `DEBUG` to False, and uncomment and change the fields for sending `ADMINS` email.
      * If your clearinghouse is supposed to provide installers other than the stock Seattle ones, you need to set up a wiki:CustomInstallerBuilder and point `SEATTLECLEARINGHOUSE_INSTALLER_BUILDER_XMLRPC` there.
      * You can also adapt the clearinghouse `TIME_ZONE`, `TESTBED` name and URL, term you would like to use for `CLEARINGHOUSE`, and project mailing lists.
[[BR]]


    * Add these lines to the clearinghouse user's `.bashrc`. (The changes will become effective the next time the user logs in, so you might want to log out and log in again following the edit.)
{{{
#!sh
# In ~/.bashrc
export PYTHONPATH=$PYTHONPATH:/home/ch/deployment:/home/ch/deployment/seattle
export DJANGO_SETTINGS_MODULE='clearinghouse.website.settings'
}}}
      Note: the `/home/ch/deployment` path entry is to make available the two packages
      `clearinghouse` and `seattle` which the deployment script created in the
      target directory. The Seattle path item is to ensure that the Repy runtime works.


    * Create the database structure:
{{{
#!sh
python website/manage.py syncdb
}}}
    * For testing purposes, start the Django development webserver:
{{{
#!sh
$ # Use this for running on localhost only:
$ python website/manage.py runserver :8000

$ # Use this for listening on every interface:
$ python website/manage.py runserver 0.0.0.0:8000
}}}
      You will now have a local development server running on port 8000, http://localhost:8000/html/login
      This is convenient for development and testing your Clearinghouse instance 
      (but should not be used in production.)

      ''Hint:'' In case you don't have a browser on your server, but have {{{ssh}}} access, you can use port forwarding to make the development server available for testing on your local machine: {{{ssh -L SOME_LOCAL_PORT:127.0.0.1:8000 YOUR_SEATTLEGENI_SERVER}}}. 
      Then, open http://localhost:SOME_LOCAL_PORT/html/login in your local browser and interact with your install.

    * For production, run the site through an Apache web server. Instructions are available  [#ConfigureApachesites below].


[[BR]]
Finally, we will set up the backend database and scripts.

  * '''Setup the key database and start the backend'''
    * Make sure have a MySQL database to use for the key database. We suggested above to call it
      `keydb`.
    * Edit the file `keydb/config.py` and set the database information for the key
      database.
    * Create the key database structure by executing the contents of the file
      `keydb/schema.sql` on the new key database you created. If set up as suggested with both the user and databse names `keydb`:
{{{
#!sh  
$ mysql -ukeydb -p --database=keydb < keydb/schema.sql
# This will prompt for the keydb database password!
}}}
    * Edit the file 'backend/config.py' and set a value for `authcode`.
    * Make sure that the file `keydb/config.py` is not readable by the user the web server will be running as, i.e. it is only user-readable (but neither group- nor world-readable), owned by the clearinghouse user, and the web server is not in the user group the file belongs to.
    * The same goes for `backend/config.py`.

The backend scripts can be started with a script [#Runningstart_clearinghouse_components.sh start_clearinghouse_components.sh]. Before we can do that, Apache needs to be set up.


[[BR]]
== Configure Apache sites ==
----

To provide encryption and keep passwords etc. safe in transit between a user's web browser and the backend database, Clearinghouse relies on SSL. Therefore you will need to
setup two !VirtualHost entries at the minimum: one for connections to
port 80 (HTTP), and one for connections to port 443 (SSL).

For a production launch, follow the instructions at [http://slacksite.com/apache/certificate.php this page] to understand Certificate Signing Requests and dealing with Certificate Authorities in greater detail. For testing purposes, you will want to generate a temporary self-signed certificate. Here's how.

We'll assume `openssl` is available on your clearinghouse machine.

  * Generate a server private key. '''Warning:''' The key does not have a passphrase! If this is a production key, make sure it's not readable by any user but `root`!
{{{
#!sh
$ openssl genrsa -out server.key 4096
}}}


  * Generate a Certificate Signing request, and sign it yourself using the server key:
{{{
#!sh
$ openssl req -new -key server.key -out server.csr
# Follow the interactive dialog. For a testing key, you can use default values for all fields.

$ openssl x509 -req -in server.csr -signkey server.key -out server.crt
}}}

  * Move the certificate and key file into a directory where Apache can find them. We suggest to use `/etc/apache2/ssl`.

Next up, we configure Apache.


-----

This is a minimal exemplary configuration to serve the Clearinghouse website from
https://mysite/clearinghouse/. Note that in this snippet, the second
!VirtualHost entry assumes that you have a server certificate and key
file setup, and the `Location` directive assumes that your Clearinghouse
installation lives in `/home/clearinghouse/live` and that your Django settings module
is `clearinghouse.website.settings`.

The first !VirtualHost provided redirects all connections to '''http'''://mysite/clearinghouse/* to use
'''https'''://mysite/clearinghouse/*. Also, the Clearinghouse installation was
deployed to the directory `/home/clearinghouse/deployment` rather than `/tmp/TARGET`, which
was the deployment directory given as an example in the steps above.

Depending on you configuration of Apache, you may want to add the below code to `/etc/apache2/sites-available/default`.


{{{
#!sh
NameVirtualHost *:80
NameVirtualHost *:443

# HTTP
<VirtualHost *:80>
    # Redirect requests for the server index page or that are geni-related
    # to the https site.
    RedirectMatch ^/$ https://mysite/geni/html/login
    RedirectMatch ^/geni https://mysite/geni/html/login
</VirtualHost>

# SSL
<VirtualHost *:443>
    ServerAdmin webmaster@localhost
    SSLEngine on
    SSLCertificateFile /etc/apache2/ssl/server.crt
    SSLCertificateKeyFile /etc/apache2/ssl/server.key
    SSLCertificateChainFile /etc/apache2/ssl/gd_intermediate.crt

    Alias /site_media "/home/geni/live/seattlegeni/website/html/media"
    <Location "/site_media">
        SetHandler None
    </Location>

    Alias /admin_media "/usr/local/lib/python2.5/site-packages/django/contrib/admin/media"
    <Location "/admin_media">
        SetHandler None
    </Location>

    <Location /geni/>
        SetHandler python-program
        PythonHandler django.core.handlers.modpython
        SetEnv DJANGO_SETTINGS_MODULE seattlegeni.website.settings
        PythonOption django.root /geni
        PythonDebug Off
        # We add /usr/local/lib/python2.5/site-packages to ensure that our
        # manual installation of django 1.1 to /usr/local is in the path
        # before any copy of django installed through the distro's repositories.
        PythonPath "['/home/geni/live/', '/home/geni/live/seattle', '/usr/local/lib/python2.5/site-packages'] + sys.path"
    </Location>

    # Make sure various locations people might request redirect somewhere that works.
    RedirectMatch ^/$ https://mysite/geni/html/login
    RedirectMatch ^/geni/?$ https://mysite/geni/html/login
    RedirectMatch ^/geni/html/?$ https://mysite/geni/html/login

    # Don't require a slash on the end of the admin url.
    RedirectMatch ^/geni/admin$ https://mysite/geni/admin/
</VirtualHost>
}}}

To use this configuration for your Seattle Clearinghouse installation, change "mysite" to your domain
name, change "/home/geni/live/" in the site media location and Python path to the directory
where you deployed Seattle Clearinghouse, and make sure "/admin_media" is aliased to a valid directory,
as the exact location will vary depending on the version of Python installed and how you
installed Django. A good place to put this configuration is the file /etc/apache2/sites-enabled/000-default.

To configure SSL you will probably need to install openssl to generate a private key/CSR
(Certificate Signing Request), and then possibly purchase a certificate for your site.
For more information see [http://slacksite.com/apache/certificate.php this page]. Put your
SSL key and certificate in a directory named /etc/apache2/ssl (or change the configuration
to correctly reference them). If you generate your own certificate instead of buying one,
remove the line for "SSLCertificateChainFile".

Be sure to restart Apache after you are done changing the configuration files.

{{{
#!sh
$ /etc/init.d/apache2 restart
}}}
If Apache gives the error:
{{{
Invalid command 'SSLEngine', perhaps misspelled or defined by a module not included in the server configuration
}}}

then you need to enable ssl by running:
{{{
#!sh
$ sudo a2enmod ssl
}}}

For importing all the required modules, Apache requires read and execute permissions for the seattle and seattlegeni directories. To ensure Apache has the correct permissions, run the following command in your Seattle Clearinghouse directory:
{{{
#!sh
$ chmod -R o+rx seattle/ seattlegeni/
}}}

If you try to access your Seattle Clearinghouse installation's website now, then it's possible you'll see an exception like this:
{{{
Cannot open file for translation '/home/geni/live/seattle/rsa.repy': [Errno 13] Permission denied: '/home/geni/live/seattle/rsa_repy.py'
}}}

This is because Apache doesn't have permission to overwrite the *_repy.py files when repyhelper
get invoked, so as a workaround you can cd to the seattle directory and change the permissions:
{{{
#!sh
$ chmod a+w *_repy.py
}}}





[[BR]]
== Running start_clearinghouse_components.sh ==
----

''Note to developers: If you are modfifying the Clearinghouse code, you might want to start its individual components manually. See the [wiki:ClearinghouseDevelopersNotes Deleopers' Notes] for details.''

If you have all the components of Seattle Clearinghouse (including Apache) configured,
the script `deploymentscripts/start_clearinghouse_components.sh` will start up all the individual
components in the correct order, and also start Apache.

Before running the script, make sure to change `CLEARINGHOUSE_USER`, `CLEARINGHOUSE_DIR`, PYTHONPATH`,
and `LOG_DIR` to the correct locations for your deployment, and create LOG_DIR` if it doesn't already exist.

If one or more of the Clearinghouse scripts are already running, kill them before running `start_clearinghouse_components.sh`. 

To run the script, run the following commands with the correct directory substituted for your deployment directory. This will start the script in a new `screen` session running as root.
{{{
#!sh
$ sudo -i
$ screen
$ cd path/to/clearinghouse/deployment/clearinghouse/deploymentscripts
$ ./start_clearinghouse_components.sh
}}}

Hit CTRL-A followed by D to detach the screen session.

To later reattach to the session in order to stop or restart `start_clearinghouse_components.sh`:
{{{
#!sh
$ sudo -i
$ screen -r
}}}


[[BR]]
== Conclusion ==
----

Congratulations! You should now have a fully operational Seattle Clearinghouse
installation that you can access at https://mysite/geni/