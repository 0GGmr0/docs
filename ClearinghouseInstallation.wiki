= RepyV2-aware Clearinghouse with Django 1.6 Installation How-To =

This document explains how to do a fresh install of the Seattle Clearinghouse portal on
a machine that is running a Debian-like Linux operating system such as Ubuntu.

 * For info on deploying the production Seattle Clearinghouse code and for starting/restarting Apache, see [wiki:SeattleGeniProductionHttp]

----
[[TOC(inline)]]
----
== Install Dependencies ==
----

Clearinghouse requires at least the following software to be installed:
 
 * [http://www.python.org/ Python] in version 2.5, 2.6, or 2.7 -- the language Seattle Clearinghouse is written in
 * [http://mysql-python.sourceforge.net/ Python MySQLDB] -- the python mysql interface
 * [http://www.mysql.com/ MySQL] -- the database
 * [http://www.apache.org/ Apache] -- the web server
 * [http://www.modpython.org/ mod_python] -- necessary for interfacing with Django code
 * [http://www.openssl.org/ OpenSSL] -- necessary for `https://` support
 * [http://www.djangoproject.com/ Django] in version 1.6.x -- necessary to run Django code
 * [https://github.com/omab/django-social-auth Django Social Auth] -- for OpenID and Oauth support.

Most of these can be installed through a package manager. For example, on a Debian-based system:

{{{
#!sh
$ sudo apt-get install apache2 libapache2-mod-python
$ sudo apt-get install mysql-server mysql-client python-mysqldb
$ sudo apt-get install ntp
$ sudo apt-get install openssl
}}}

Django, the web framework the clearinghouse uses, is available at https://www.djangoproject.com/download/ or through a package manager. Please note that we currently support the 1.6 line only.
{{{
#!sh
$ pip install django==1.6.7
}}}
Depending on your actual OS and setup, this command might require `sudo` privileges.


== Optional: Setup OpenID and OAuth ==
If you would like your Clearinghouse to support login not only through user accounts it manages itself, but ID/authentication services like OpenID and OAuth, or web services like Google, Facebook, or !GitHub, take a look at the [wiki:ClearinghouseSocialAuth social auth support instructions page].



== Create MySQL databases ==

You need two mysql databases and seperate users with access to each.
  * First database name: `seattlegeni`
  * Second database name: `keydb`

For simplicity you can make the database usernames correspond to the database names.

Here's an example of creating a database and a user:

{{{
#!sh
$ mysql -u root -p

mysql> create database seattlegeni;

mysql> GRANT ALL PRIVILEGES 
ON seattlegeni.* 
TO 'seattlegeni'@'localhost'
IDENTIFIED BY 'desired password for seattlegeni';

mysql> create database keydb;

mysql> GRANT ALL PRIVILEGES 
ON keydb.* 
TO 'keydb'@'localhost'
IDENTIFIED BY 'desired password for keydb';
}}}
where you would replace the password strings with suitable ones. Afterwards, type `\q` to leave the MySQL prompt:

{{{
#!sh
mysql> \q
Bye!
$ 
}}}



== Deploying and running Clearinghouse ==
In this section, we will deploy and run a copy of the Clearinghouse from your current user account in a temporary directory. This is mainly useful for testing. For an actual deployment, we recommend setting up a separate user account, e.g. named {{{clearinghouse}}}, and following the steps below as this user.

  * '''Initial preparation'''
    * Clone the Clearinghouse repository into your home directory, and let the initialize script fetch dependencies:
{{{
#!sh
$ cd ~
$ git clone https://github.com/SeattleTestbed/clearinghouse.git
$ cd clearinghouse/scripts
$ python initialize.py
}}}
    * Deploy all necessary files to a directory of your choice. We'll use `/tmp/TARGET` in these instructions. (For an actual deployment, best use an empty directory under the clearinghouse's user account.) You'll need to give two arguments to the deployment script: The parent directory of the `clearinghouse` repo you checked out, and a directory you want to deploy to. (The latter should not yet exist.) For example:
{{{
#!sh
$ python ~/clearinghouse/deploymentscripts/deploy_clearinghouse.py . /tmp/TARGET
}}}


{{{
#!comment
    (Historical Note: On existing Seattle live deployments, the path will likely be {{{/home/geni/live}}}).
}}}


    * Deploy the Repy runtime. Create a `seattle` directory besides you deployed `clearinghouse`, and run the build script.
{{{
#!sh
$ mkdir /tmp/TARGET/seattle
$ cd ~/clearinghouse/scripts
$ python build.py /tmp/TARGET/seattle
}}}
[[BR]]

  * The Seattle [wiki:SeattleBackend backend scripts] require a set of public keys (called ''state keys'') to work. From the `seattle` runtime directory created and populated earlier, make runnable and then run the script that will generate state keys for you:
 
{{{
#!sh
$ cd /tmp/TARGET/seattle
$ chmod +x generate_state_keys.sh
$ ./generate_state_keys.sh ../clearinghouse/node_state_transitions/statekeys
}}}
    * Note that only the `*.publickey` files are required for the clearinghouse. You can safely remove the `*.privatekey`s from `/tmp/TARGET/clearinghouse/node_state_transitions/statekeys`.

  * Change to the `clearinghouse` directory that is in the directory you deployed
      to. For example:
{{{
#!sh 
cd /tmp/TARGET/clearinghouse
}}}

  * '''Setup the website and start a development version of it'''
    * Be sure you've already created a MySQL database for the clearinghouse (e.g.
      called `seattlegeni`).
    * Find `/tmp/TARGET/clearinghouse/website/settings.py` and edit:
      * The clearinghouse database name and credentials in the `DATABASES` dict.
{{{
# Database
# https://docs.djangoproject.com/en/1.6/ref/settings/#databases
DATABASES = {
    'default': {
        # you can use django.db.backends.sqlite3 instead of mysql. If you
        # decide to do so, you can leave the other fields empty
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'seattlegeni',
        'USER': 'seattlegeni',
        'PASSWORD': 'password',
        'HOST': '',
        'PORT': '',
    }
}
}}}


      * Set SECRET_KEY to a long, random string.
{{{
# Make this unique, and don't share it with anybody.
# Fill this in!
SECRET_KEY = ''
}}}

      * If this is a production launch, also set DEBUG to False, and uncomment and change the fields for sending ADMINS email.
{{{
# If DEBUG is True, then error details will be shown on the website and ADMINS
# will not receive an email when an error occurs. So, this should be False in
# production.
DEBUG = False
...
# Email addresses of people that should be emailed when a 500 error occurs on
# the site when DEBUG = False (that is, in production). Leave this to be empty
# if nobody should receive an email. 
ADMINS = (
    ('Admin_name', 'Admin_email'),
)
}}}

      * If your clearinghouse is supposed to provide installers other than the stock Seattle ones, you need to set up a wiki:CustomInstallerBuilder and point `SEATTLECLEARINGHOUSE_INSTALLER_BUILDER_XMLRPC` there.
      * You can also adapt the clearinghouse `TIME_ZONE`, `TESTBED` name and URL, term you would like to use for `CLEARINGHOUSE`, and project mailing lists.
[[BR]]


    * Add these lines to your `.bashrc`, log out of your shell, and log in again to make the changes become effective:
{{{
#!sh
# In ~/.bashrc
export PYTHONPATH=$PYTHONPATH:/tmp/TARGET:/tmp/TARGET/seattle
export DJANGO_SETTINGS_MODULE='clearinghouse.website.settings'
}}}
      Note: the /tmp/TARGET path entry is to make available the two packages
      `clearinghouse` and `seattle` which the deployment script created in the
      target directory. The Seattle path item is to ensure that the Repy runtime works.

    * Create the database structure:
{{{
#!sh
python website/manage.py syncdb
}}}
    * For testing purposes, start the Django development webserver:
{{{
#!sh
$ # Use this for running on localhost only:
$ python website/manage.py runserver :8000

$ # Use this for listening on every interface:
$ python website/manage.py runserver 0.0.0.0:8000
}}}
      You will now have a local development server running on port 8000, http://localhost:8000/html/login
      This is convenient for development and testing your Clearinghouse instance 
      (but should not be used in production.)

      ''Hint:'' In case you don't have a browser on your server, but have {{{ssh}}} access, you can use port forwarding to make the development server available for testing on your local machine: {{{ssh -L SOME_LOCAL_PORT:127.0.0.1:8000 YOUR_SEATTLEGENI_SERVER}}}. 
      Then, open http://localhost:SOME_LOCAL_PORT/ in your local browser and interact with your install.

    * For production, run the site through Apache: [wiki:SeattleGeniInstallation#ConfigureApachesites ConfigureApachesites]


[[BR]]
The last couple of steps will make it so that the backend database and scripts are set up. In a production launch, starting all of the processes described below is simplified by using a script, see the section on [#Runningstart_seattlegeni_components.sh running start_seattlegeni_components.sh].

For reference, we'll explain here how to start the individual components as well
as include first-time configuration information.
''Please note'': When starting the components manually, you need to start them '''in the order shown'''. Most importantly, first start the lockserver, then the backend, then everything else.
(However, we're not going to describe the initial setup in this order.)

  * '''Start the lockserver'''
    * Create a new shell
    * Set your environment variables the same way as shown above.
    * Start the lockserver:
{{{
#!sh
$ cd /tmp/TARGET/clearinghouse
$ python lockserver/lockserver_daemon.py
}}}
The lockserver starts and tells you which port it listens on, and that a thread has been started.
(If you get an `ImportError` instead, then please check your environment variables again.)

  * '''Setup the key database and start the backend'''
    * Make sure have a MySQL database to use for the key database. We suggested above to call it
      `keydb`.
    * Make sure that the file `keydb/config.py` is not readable by the user the
      web server will be running as. 
    * Edit the file `keydb/config.py` and set the database information for the key
      database.
    * Create the key database structure by executing the contents of the file
      `keydb/schema.sql` on the new key database you created. If set up as suggested with both the user and databse names `keydb`:
{{{
#!sh  
mysql -ukeydb -p --database=keydb < keydb/schema.sql
}}}
    * Edit the file 'backend/config.py' and set a value for the authcode.
    * Make sure that the file `backend/config.py` is not readable by the web server user.
    * In a new shell, again set your environment variables the same way as shown above.
    * Start the backend_daemon. Due to a bug, this must be done from the `seattle` directory currently
      (because the repy files need to be in the directory it is run from):
{{{
#!sh  
cd /tmp/TARGET/seattle
python ../clearinghouse/backend/backend_daemon.py
}}}

  * '''Start the polling daemons'''
    * Start a new shell and set your environment variables the same way as shown above.
    * Start the polling daemon. Again, this must be done from the `seattle` directory currently:
{{{
#!sh   
cd /tmp/TARGET/seattle
python ../clearinghouse/polling/check_active_db_nodes.py
}}}

  * '''Start the node state transition scripts'''
    * Set your environment variables the same way as shown above.
    * Start each transition script you intend to run. Again, this must be done from the `seattle` directory currently:
{{{
#!sh
cd /tmp/TARGET/seattle
python ../clearinghouse/node_state_transitions/TRANSITION_SCRIPT_NAME.py
}}}
    * The four transitions scripts that you want running are:
      * transition_donation_to_canonical
      * transition_canonical_to_twopercent
      * transition_twopercent_to_twopercent
      * transition_onepercentmanyevents_to_canonical


[[BR]]
== Configure Apache sites ==
----

To provide encryption, Seattle Clearinghouse relies on SSL. Therefore you will need to
setup two !VirtualHost entries at the minimum: one for connections to
port 80 (HTTP), and one for connections to port 443 (SSL).

Here is a somewhat minimal configuration to serve the geni website from
https://mysite/geni/. Note that in this snippet, the second
!VirtualHost entry assumes that you have a server certificate and key
file setup, and the Location directive assumes that your geni
installation lives in /home/geni/ and that your django settings module
is seattlegeni.website.settings. The first !VirtualHost is only provided to redirect
all connections to '''http'''://mysite/geni/* to use
'''https'''://mysite/geni/*. Also, the seattlegeni installation was
deployed to the directory /home/geni/live rather than /tmp/deploy, which
was the deployment directory given as an example in the steps above.

Depending on you configuration of apache, you may want to add the below code to: /etc/apache2/sites-available/default

{{{
#!sh
NameVirtualHost *:80
NameVirtualHost *:443

# HTTP
<VirtualHost *:80>
    # Redirect requests for the server index page or that are geni-related
    # to the https site.
    RedirectMatch ^/$ https://mysite/geni/html/login
    RedirectMatch ^/geni https://mysite/geni/html/login
</VirtualHost>

# SSL
<VirtualHost *:443>
    ServerAdmin webmaster@localhost
    SSLEngine on
    SSLCertificateFile /etc/apache2/ssl/server.crt
    SSLCertificateKeyFile /etc/apache2/ssl/server.key
    SSLCertificateChainFile /etc/apache2/ssl/gd_intermediate.crt

    Alias /site_media "/home/geni/live/seattlegeni/website/html/media"
    <Location "/site_media">
        SetHandler None
    </Location>

    Alias /admin_media "/usr/local/lib/python2.5/site-packages/django/contrib/admin/media"
    <Location "/admin_media">
        SetHandler None
    </Location>

    <Location /geni/>
        SetHandler python-program
        PythonHandler django.core.handlers.modpython
        SetEnv DJANGO_SETTINGS_MODULE seattlegeni.website.settings
        PythonOption django.root /geni
        PythonDebug Off
        # We add /usr/local/lib/python2.5/site-packages to ensure that our
        # manual installation of django 1.1 to /usr/local is in the path
        # before any copy of django installed through the distro's repositories.
        PythonPath "['/home/geni/live/', '/home/geni/live/seattle', '/usr/local/lib/python2.5/site-packages'] + sys.path"
    </Location>

    # Make sure various locations people might request redirect somewhere that works.
    RedirectMatch ^/$ https://mysite/geni/html/login
    RedirectMatch ^/geni/?$ https://mysite/geni/html/login
    RedirectMatch ^/geni/html/?$ https://mysite/geni/html/login

    # Don't require a slash on the end of the admin url.
    RedirectMatch ^/geni/admin$ https://mysite/geni/admin/
</VirtualHost>
}}}

To use this configuration for your Seattle Clearinghouse installation, change "mysite" to your domain
name, change "/home/geni/live/" in the site media location and Python path to the directory
where you deployed Seattle Clearinghouse, and make sure "/admin_media" is aliased to a valid directory,
as the exact location will vary depending on the version of Python installed and how you
installed Django. A good place to put this configuration is the file /etc/apache2/sites-enabled/000-default.

To configure SSL you will probably need to install openssl to generate a private key/CSR
(Certificate Signing Request), and then possibly purchase a certificate for your site.
For more information see [http://slacksite.com/apache/certificate.php this page]. Put your
SSL key and certificate in a directory named /etc/apache2/ssl (or change the configuration
to correctly reference them). If you generate your own certificate instead of buying one,
remove the line for "SSLCertificateChainFile".

Be sure to restart Apache after you are done changing the configuration files.

{{{
#!sh
$ /etc/init.d/apache2 restart
}}}
If Apache gives the error:
{{{
Invalid command 'SSLEngine', perhaps misspelled or defined by a module not included in the server configuration
}}}

then you need to enable ssl by running:
{{{
#!sh
$ sudo a2enmod ssl
}}}

For importing all the required modules, Apache requires read and execute permissions for the seattle and seattlegeni directories. To ensure Apache has the correct permissions, run the following command in your Seattle Clearinghouse directory:
{{{
#!sh
$ chmod -R o+rx seattle/ seattlegeni/
}}}

If you try to access your Seattle Clearinghouse installation's website now, then it's possible you'll see an exception like this:
{{{
Cannot open file for translation '/home/geni/live/seattle/rsa.repy': [Errno 13] Permission denied: '/home/geni/live/seattle/rsa_repy.py'
}}}

This is because Apache doesn't have permission to overwrite the *_repy.py files when repyhelper
get invoked, so as a workaround you can cd to the seattle directory and change the permissions:
{{{
#!sh
$ chmod a+w *_repy.py
}}}


[[BR]]
== Running start_seattlegeni_components.sh ==
----

If you have all the components of Seattle Clearinghouse (including Apache) configured,
the script deploymentscripts/start_seattlegeni_components.sh will start up all the individual
components in the correct order.

Before running start_seattlegeni_components.sh, make sure to change PYTHONPATH, SEATTLEGENI_DIR,
and LOG_DIR to the correct locations for your deployment, change geni in SUDO_CMD to the correct
username, and create the directory for LOG_DIR if it doesn't already exist.

First, if one or more of the Seattle Clearinghouse scripts is already running, kill them before running start_seattlegeni_components.sh.

To run start_seattlegeni_components.sh, run the following commands with the correct directory substituted for /home/geni/live:
{{{
#!sh
$ sudo -i
$ screen
$ cd /home/geni/live/seattlegeni/deploymentscripts
$ ./start_seattlegeni_components.sh
}}}
This will start the script in a new screen session running as root. Hit CTRL-A followed by D to detach the screen session.

To later reattach to the session in order to stop or restart start_seattlegeni_components.sh:
{{{
#!sh
$ sudo -i
$ screen -r
}}}


[[BR]]
== Conclusion ==
----

Congratulations! You should now have a fully operational Seattle Clearinghouse
installation that you can access at https://mysite/geni/