= Using Seattle on the Nokia N800 =
Explains how to install Seattle as well as running the unit tests on the Nokia N800 Internet Tablet.
----
[[TOC(inline)]]
----

== Tools Required ==
In order to run Seattle and its unit tests, you will need two things: Python and root access to the system in the tablet. Python or utilities that will allow you root access can be obtained from the Application Manager. 
[[BR]]
 1. In the top menu, go to Tools -> Application Catalog. 
 1. Select the "maemo extras" entry and Edit. 
 1. Uncheck the "disabled" box. 
 1. Refresh the installable package list, and packages that we require should now show up.

[[BR]]

=== Python ===
For Python, you will need to install the "maemo-python-env" package.

[[BR]]

=== Root access ===
This is only required for the installation of Seattle. In particular, root access is required to configure Seattle to run on startup. There are several ways to obtain the root shell access. This article will describe two easy ways by which root shell access can be obtained.

==== rootsh ====
Find and install the "rootsh" package. The root shell package allows the user to gain root access through a simple command: "sudo gainroot" or simply "root".

==== openssh ====
Find and install "openssh" package. During installation the first time, you will be prompted for a new password. Enter your password of choice and remember it for later. Root shell access can be obtained using "ssh root@localhost". You will be prompted for the password you entered during installation.

----

== Setting up Seattle ==
[[BR]]
Download Seattle tarball here.

 1. Make sure you are operating on a Linux system.
 1. Choose an output folder for the base installers. Note: If there are already base installers of the same names in this folder, they will be overwritten without warning.
 1. Navigate to the trunk/dist directory.
 1. Run the program (make_base_installers.py) with the following arguments:
   1. Various flags that will modify the behavior of the program. Include "m" to create a Mac installer, "l" to create a Linux installer, "w" to create a Windows installer, "i" to create a Windows Mobile installer, "a" to create installers for all supported Operating Systems, and "t" (optional) to include the test cases with the installers. Example: "mlt" will build Mac and Linux installers with test cases.
   1. The path to trunk; for example, ".." if you are running from the dist directory.
   1. The path to the public key that the installation will eventually use to communicate with the software updater.
   1. The path to the private key that the installation will eventually use to communicate with the software updater.
   1. The path to the output directory that you wanted any created installers to end up in.
   1. (Optional) The version of the installer which will be included in the installer name.
----

== Running Seattle Unit Tests ==
[[BR]]
You might often want to package up the code nicely so that you can easily test the current contents of your working directories on various systems. In this case, you might not care very much about the keys for the software updater or the vessel information. If this is true, then you can quickly and easily build installers by navigating to trunk/dist and running the following: 
{{{
python make_base_installers.py at .. updater_keys/updater.publickey updater_keys/updater.privatekey output/dir
}}}
Before running the installer on any system, you will want to first run "python nminit.py" from inside the install directory. This will generate some sample vessel information.