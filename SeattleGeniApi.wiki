= XML-RPC API to Seattle GENI =

[[BR]]

=== acquire_resources(geni_user, rspec) ===
----

Given a geni_user (a string that is the username used to log into SeattleGENI) and a resource specification (dict), this function acquires resources for the specified user.   There are currently three types of rspecs defined:


{'rspec_type':'LAN', 'number_of_nodes':N}   # returns N nodes all with the same starting three octects of the IP address
{'rspec_type':'WAN', 'number_of_nodes':N}   # returns N nodes all with different starting three octects of the IP address
{'rspec_type':'Random', 'number_of_nodes':N}   # returns N nodes


Returns a list of dictionaries, where the dicts are of the form:
      '''{'node_ip':ip, 'node_port':port, 'vessel_id':vessel_id, 'node_id':node_id, 'handle':handle}'''[[BR]]
      ''ip'' is a string, containing the IP or other identifying information of the node manager.[[BR]]
      ''port'' is an integer, representing the port used by the node manager.[[BR]]
      ''id'' is a string, which represents the vessel_id for the vessel (such as 'v21').[[BR]]
      ''node_id'' is the node id of the node (a public key string).[[BR]]
      ''handle'' has an undefined type, but is used in future calls to release_resources.   ''Make no assumptions about the type of this item!''.[[BR]]
      Each dict contains info about each acquired vessel.[[BR]]

Raises a ''TypeError'' if the given values are of incorrect type.[[BR]]
Raises a ''ValueError'' if '''rspec''' is not of an understood type.[[BR]]
Raises a ''GENI_NotEnoughCredits'' if the user doesn't have enough creditsto acquire '''num''' vessels.   '''JAC: I don't like the word Credits here and will likely want to change it'''[[BR]]
Raises a ''GENI_NoAvailNodes'' if there are no available nodes to acquire.[[BR]]
Raises a ''GENI_OpError'' if the operation fails due to some GENI internal error.[[BR]]

[[BR]]
=== release_resources(geni_user, list_of_handles) ===
----

Release resources associated with an account. If '''which''' is an empty list then it releases all resources associated with an account '''why?'''. Otherwise, it releases vessels based on the handles within the  '''which''' list.

Raises a ''TypeError'' if the list_of_handles aren't integer values or valid.[[BR]]
Raises a ''GENI_OpError'' if the operation fails due to some GENI internal error.[[BR]]

[[BR]]
=== get_resource_info(geni_user) ===
----

Returns a list of resources currently associated with geni_user.

The return list is of the same form as returned by acquire_resources



[[BR]]
=== get_account_info(geni_user) ===
----

Returns a dict of account information for the account. This includes the user's port number, name, URL for installers, if the private key exists, total vessels allowed, and the user's affiliation.

Returns a dictionary of the form:
      '''{'user_port':user_port, 'user_name':user_name, 'urlinstaller':urlinstaller, 'private_key_exists':private_key_exists, 'max_vessel':max_vessel, 'user_affiliation':user_affiliation}'''[[BR]]
      ''user_port'' is an integer, indicating a port number that by default will be available for TCP / UDP on all of the user's vessels.[[BR]]
      ''user_name'' is a string containing the name.   This will be the same as the geni_user.[[BR]]
      ''urlinstaller'' is a string, and points to the URL where the user's installers may be downloaded.[[BR]]
      ''private_key_exists'' is a boolean, determining whether the private key exists in the database for this user. [[BR]]
      ''max_vessel'' is an integer, indicating the total vessels allowed.   This may vary as donations are credited to the user or go offline.   [[BR]]
      ''user_affiliation'' is a string and represents the affiliation provided by the user when registering for an account.   This field is not validated so should not be trusted.[[BR]]

[[BR]]
=== get_public_key(geni_user) ===
----

Returns the user's public key as a string.


[[BR]]
=== get_private_key(geni_user) ===
----

Returns the user's private key as a string. 

Raises a ''GENI_KeyAlreadyRemoved'' if the key was already removed.


[[BR]]
=== delete_private_key(geni_user) ===
----
Removes the user's private key from the server.


'''JAC: What if the geni_user isn't valid?   Also, what if the user tries to do this on behalf of a different user?   How does this react?'''