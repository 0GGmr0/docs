= XML-RPC API to Seattle GENI =

[[BR]]

=== acquire_resources(geni_user, num, type) ===
----

Given a geni_user, acquires num resources of type.
Available types are 1: LAN, 2: WAN, 3: Random.

Returns a list of dictionaries, where the dicts are of the form:
      '''{'node_ip':ip, 'node_port':port, 'node_id':id, 'node_name':name, 'vmap_id':vmid}'''[[BR]]
      ''ip'' is a string, containing the IP of the vessel.[[BR]]
      ''port'' is an integer, representing the port on the vessel.[[BR]]
      ''id'' is a string, the public key of the vessel.[[BR]]
      ''name'' is a string, which is the vessel name.[[BR]]
      ''vmid'' is an integer, which uniquely identifies this vessel to its vessel mapping.[[BR]]
      Each dict contains info about each acquired vessel.[[BR]]

Raises a ''TypeError'' if the given values are of incorrect type.[[BR]]
Raises a ''ValueError'' if '''num''' is negative, or if '''type''' is not between 1 and 3.[[BR]]
Raises a ''GENI_NotEnoughCredits'' if the user doesn't have enough credits to acquire '''num''' vessels.[[BR]]
Raises a ''GENI_NoAvailNodes'' if there are no available nodes to acquire.[[BR]]
Raises a ''GENI_OpError'' if the operation fails due to some GENI internal error.[[BR]]

[[BR]]
=== release_resources(geni_user, which) ===
----

Release resources associated with an account. If '''which''' is an empty list then it releases all resources associated with an account. Otherwise, it releases vessels based on the vmap_ids within the  '''which''' list.

Raises a ''TypeError'' if the vmap_ids in the list aren't integer values.[[BR]]
Raises a ''GENI_OpError'' if the operation fails due to some GENI internal error.[[BR]]

[[BR]]
=== get_resource_info(geni_user) ===
----

Returns a list of resources currently associated with geni_user.

The return list is of the form:
      '''[vessel1, vessel2, etc...]'''


[[BR]]
=== get_account_info(geni_user) ===
----

Returns a dict of account information for the account. This includes the user's port number, name, URL for installers, if the private key exists, total vessels allowed, and the user's affiliation.

Returns a dictionary of the form:
      '''{'user_port':user_port, 'user_name':user_name, 'urlinstaller':urlinstaller, 'privkey_exist':privkey_exist, 'max_vessel':max_vessel, 'user_affiliation':user_affiliation}'''[[BR]]
      ''user_port'' is an integer, indicating the user's port number.[[BR]]
      ''user_name'' is a string.[[BR]]
      ''urlinstaller'' is a string, the URL for installers.[[BR]]
      ''privkey_exist'' is a boolean, determining whether the private key exists for this user. [[BR]]
      ''max_vessel'' is an integer, indicating the total vessels allowed.[[BR]]
      ''user_affiliation'' is a string.[[BR]]

[[BR]]
=== get_public_key(geni_user) ===
----

Returns the user's public key.


[[BR]]
=== get_private_key(geni_user) ===
----

Returns the user's private key. 

Raises a ''GENI_KeyAlreadyRemoved'' if the key was already removed.


[[BR]]
=== delete_private_key(geni_user) ===
----
Removes the user's private key from the server.