Similar to current implementations of the !MapReduce systems of Hadoop and Googleâ€™s indexing system, !MapReduce with Repy on Seattle nodes works with several nodes, harnessing their power to parallelize computation.  For the first assignment, students will make the base framework of a !MapReduce application: a primary node that delegates a task to its workers (also called peers), and a single peer that takes the data given to it by the primary, performs a map pass and a reduce pass on the data, and eventually passes that data back to the primary for post-processing.  This assignment will require the need to implement a simple data flow, design a message-sending protocol, and abstract the functionality of the map() and reduce() methods.

The second assignment would increase the number of peers past identity by implementing partitioning code to enable map data-passing between the peers during the shuffle phase.  By implementing the partitioning method, the primary restriction of !MapReduce must be upheld: all keys, no matter what their original node, must be sent to the same reducer for the reducing stage.  By adding the partitioner to the peers and updating the basic mechanics of the primary, simple parallelism is achieved in this assignment.

The final assignment is to add fault-tolerance to the system by adding fail-safes to both the primary node and its peers.   The primary node will implement a scoreboard that will keep track of all state by issuing a regular heartbeat query to each peer and performing an action (i.e. allocate a new peer, restart a job, etc) if a job fails or connectivity is lost, as frequently happens while working over WAN.  The primary fulfills the meaning of its name and a control flow is established between the primary and all peers to inform them of any changes to the job details (e.g. new peer allocated).  The peers will communicate to each other directly and establish this connection early on to migitate concerns of semi-transitivity, communicating back to the primary if a node is unreachable.  In addition, the peers act as scouts, informing the primary if a node has been forcefully terminated using a timeout on the peer-to-peer socket.

Please feel free to contact Alper or Ivan for more information on this potential project.

[EducatorsPage Back to Assisnment/Project List]