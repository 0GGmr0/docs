= Performance Isolation Benchmarks =


This set of benchmarks will provide information about the performance isolation of different virtual machine technologies.   By comparing the results of performance with and without stress in different VMs, you can use this to determine how well different types of VM software isolate performance of resources like CPU, memory, disk, and threads / processes.  

Running these benchmarks will take about 6-7 minutes, depending on the speed of your system and type of benchmarks you will run. You can decide which benchmarks you want to run. 

Benchmarks which support two different kinds of OS are offered, a Windows version and a Linux version, either can be downloaded to run the test.  The links can be found on the bottom of this Wiki page.

----

[[TOC(inline)]]

----


== Setup Benchmarks in Linux ==

=== Setup Repy tests ===


Notice: the repy test can only be tested upon Seattle platform of Repy_v2. For how to download and use repy_v2, please refer to the link below:

https://seattle.cs.washington.edu/wiki/RepyV2CheckoutAndUnitTests

Create a folder to run the benchmarks. This can be done like so:

{{{
cd $SEATTLE/branches/repy_v2/
mkdir bench/
python preparetest.py bench
cp benchmarking-support/* bench/
cp for_test_repy/* bench/
}}}

The for_test_repy can be found in the zip file.


=== Setup Python tests ===


Python tests can be run without Seattle. Users can either run the sh/bat script files to run the tests(which may cause CRASH) or run them in the VMs(highly recommended).


== Setup Benchmarks in Windows ==


If the OS used is Windows, iozone is needed to support the disk test. It can be downloaded from the link below:

http://www.iozone.org/src/current/IozoneSetup.zip

Run the iozoneSetup.exe and install it under both the for_test_python and for_test_repy directory. 

The others are the same as setup benchmarks in Linux. 



== Running the Repy Benchmarks ==
Each type of benchmark has its own script to initiate the benchmarks.
 * To run the cpu bomb tests, invoke ./cpubomb.sh
 * To run the fork bomb test, invoke ./fork.sh
 * To run the disk bomb test, invoke ./disk.sh
 * To run the memory bomb tests, invoke ./memorybomb.sh
To run the tests in Windows, run the *.bat files.


== Running the Python Benchmarks ==
=== Running the Benchmarks in VMs ===
It is highly recommended to run the Python benchmarks in VMs, such as VMware Workstation, Virtual Box, Xen, etc. 


Setup Python benchmarks in VMs:
 * Create 5 different VMs in the Workstation. 
 * Run the Python tests separately without stress in first 4 VMs and gain the results. 
 * Run the stress file in the 5th VM. 
 * Run the Python tests separately in first 4 VMs and gain the results

Example:
Take running CPU benchmarks in VMWare Workstation as an example. 

Run cpubomb1.py, cpubomb2.py, cpubomb3.py, cpubomb4.py separately first in 4 different VMs and gain the results files. Run cpubomb.py in the 5th VM and run cpubomb1.py, cpubomb2.py, cpubomb3.py, cpubomb4.py in the first 4 different VMs and get the results. 

=== Running the Benchmarks without VMs ===
This is just for tests and we do not recommend users to do this.

Each type of benchmark has its own script to initiate the benchmarks.
 * To run the cpu bomb tests, invoke ./cpubomb.sh
 * To run the fork bomb test, invoke ./fork.sh
 * To run the disk bomb test, invoke ./disk.sh
 * To run the memory bomb tests, invoke ./memorybomb.sh
To run the tests in Windows, run the *.bat files.



== Result of the benchmarks ==
The benchmarks will return several result files to illustrate the isolation of Seattle. 
The results of benchmarks are related to the kind of them, for example: cpu bomb are cpu1.txt, cpu2.txt, cpu3.txt, cpu4.txt.


== Warnings ==
 * 1. Since this is a type of resources bomb benchmarks, the Python version may cause huge destruction to the computer. Because of this, it is highly recommended to run these benchmarks instead in VMs. 
 * 2. Don't be worried by the Repy benchmarks. They are safe enough. 
 * 3. The tests may take a lot of time to finish depending on the computer specifications. If the Terminal is forced to close , please kill the processes manually in the system monitor. 


== Thanks ==
We would appreciate it if you can send the results of the benchmarks to us and also include your computer specifications(such as OS, cpu(including cores and threads of the cpu), memory, etc).  We would also appreciate it if you could contact us if you encounter any problems.

More specifics!!!   How do I get the above information?

Please contact: enchl317 at gmail.com


