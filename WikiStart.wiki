== What is Seattle? ==
Seattle is a platform for networking and distributed systems research. It's free, community-driven, and offers a large deployment of computers spread across the world. You can access our [http://seattlegeni.cs.washington.edu/ SeattleGENI] website to share resources with other uses.  Seattle works by operating on resources donated by users and institutions. The global distribution of the Seattle network provides the ability to use it in application contexts that include cloud computing, peer-to-peer networking, ubiquitous/mobile computing, distributed systems.

Seattle runs on end user systems on diverse platforms in a safe and contained manner. Users install and run Seattle with little to no impact on system security and performance. Sandboxes are established on user's computer to limit the consumption of resources such as cpu, memory/disk usage, and network bandwidth. Programs are only allowed to operate inside of a sandbox, ensuring that other files and programs on the computer are kept private and safe. This allows researchers and students to safely run code without impacting performance or security.

== Features ==
 * Community-driven and free.
 * Scalable architecture.
 * Non-intrusive and safe for end users.
 * Already installed on about 1,000 machines across hundreds of universities worldwide.
 * Easy to learn, based on a subset of [http://www.python.org/ Python].
 * Simple and clean programs:
   * A TCP ping client is just six lines of code. A UDP ping server is just four lines.
   * A [http://pdos.csail.mit.edu/chord/faq.html Chord] implementation requires about 300 lines of code.
 * Provides access to systems behind a wide array of network technologies.
 * Cross-platform support:
   * Windows (XP or newer)
   * Mac OS X
   * Linux
   * Portable devices (Nokia N800s, jailbroken iPhones)

== Is Seattle For Me? ==
Seattle is ideal for students, researchers, and companies that want to prototype and test code on testbeds that have varying scale, diversity, and topologies. The same code may easily be run on a variety of operating systems, architectures, and network environments to understand the performance as well as the dynamics of a distributed system. Seattle is also ideal for studying wide-area effects and characteristics that exist in the Internet. For example, path transitivity, latency and bandwidth variations, as well as availability can all be characterized with Seattle.

Users needing direct access to hardware, running code in C, etc. should look elsewhere. Offering these capabilities would make it difficult to ensure safety and performance isolation for end users.

== What Makes Seattle Different? ==
There are a wide variety of other platforms and testbeds readily available from a wide range of sources, with an equally expansive set of project goals. Some related projects and their differences include: 
 * [http://www.planet-lab.org/ PlanetLab] is similar in that it offers a platform composed of donated resources from around the world. However, !PlanetLab nodes are dedicated to !PlanetLab, while Seattle computers are not dedicated to the platform. In addition, !PlanetLab's computers and network connectivity are very homogeneous. Seattle aims to be more widely distributed and to support broader resource diversity.
 * [http://satellitelab.mpi-sws.mpg.de/ SatelliteLab] is useful for studying network characteristics and aims to bring heterogeneity to !PlanetLab.   However, due to the reliance on !PlanetLab nodes to forward traffic, !SatelliteLab has fidelity limitations and is not intended or able to scale to the sorts of diversity and size of Seattle.
 * [http://www.emulab.net/ Emulab] provides emulated network environments for researchers to conduct experiments.   While emulation allows more control of network hardware and topology, it does not capture the behavior of the Internet.   Running Seattle allows more realistic experimentation by running on the Internet and support larger scale.
 * [http://boinc.berkeley.edu/ BOINC] and [http://www.cs.wisc.edu/condor/ Condor] also allow users to donate resources. However, the emphasis is on computational power; getting resources from 1000 cheap computers is less preferable than getting resources from a supercomputer.   Seattle places more emphasis on the diversity of the networks and systems used, as computational power is not the main goal.
 * [http://aws.amazon.com/ec2/ Amazon's EC2] provides a paid service that provides operating system virtual machines.   Seattle instead relies on donated resources and provides programming language virtual machines. 
 * [http://code.google.com/appengine/ Google's AppEngine] executes programs written in a constrained version of Python and supports high level abstractions (such as global non-relational storage). It is useful for building locality-oblivious web applications that fit the HTTP request\response protocol model, however, it's transparent handling of scalability and locality make it unsuitable for those wishing to teach or address these fundamental distributed system topics. !AppEngine is run on Google controlled resources instead of on donated resources.
 * [RelatedWork More related work...]

== How do I Learn More? ==

Learn the basics:

 * Watch our [http://seattle.cs.washington.edu/demos/ five-minute demo]!
 * Learn more about [SeattleComponents how Seattle works].
 * Try [DonatingResources donating resources] to other users.
 * Complete the [TakeHomeAssignment take-home assignment] to get hands-on experience with Seattle.

Check out the portal pages for in-depth information:

 * [ProgrammersPage Programmers Portal]: Resources for programmers wanting to learn the platform.
 * [EducatorsPage Educator Portal]: Example assignments for students using Seattle.
 * [ContributorsPage Contributors Portal]: Detailed information about how to contribute to the project.

If you are using Seattle and need support, send an email to our [https://mailman.cs.washington.edu/mailman/listinfo/seattle-users mailing list].