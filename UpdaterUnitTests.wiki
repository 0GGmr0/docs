= Running Software Updater Unit Tests =

The softwareupdater tests can now be run to either update from a remote server or from local folders.  The one running from local folders is much simpler to run.

----
[[TOC(inline)]]
----

[[BR]]
== Updating From Local Location ==
To run the tests locally, you need to first run preparetest.py to a folder of your choosing.  Then you also need to copy over the files from trunk/assignments/webserver/ and trunk/softwareupdater/test/ to that same folder.  Also, there cannot be another instance of softwareupdater.py running, or the restart tests will fail.  Note that when running these tests on Windows, ps cannot be used to check process status.  You will have to do this yourself in the task manager.  Once everything is setup, run {{{python test_updater_local.py}}} from the folder you just setup.

Each rsync unit test has 3 lines of output.  The first is the webserver telling you the ip address it is listening on (this should be the address of the local machine).  The second line is the local folder that the webserver is serving.  The third line notes the type of test, the url being passed to rsync, and whether or not the test passed.  

For the restart test, initially there should be only one softwareupdater running.  The return code that is printed next should be 10, and there should still be only one softwareupdater running after this.  The finally, there should be output saying "Second update a success!".

If everything is successful, there will be an instance of softwareupdater.py and nmmain.py running when the script completes.  It is non-trivial to clean these up automatically, because we do not directly start these processes.


[[BR]]
== Updating From Remote Location ==
[[BR]]
=== Prepare Folders ===

To start, you need to create a new directory that is empty save for another directory.  For example, you could create a directory /home/user/supertest, which only contains a directory named magictest (/home/user/supertest/magictest).  Then from the trunk of svn, run preparetest.py with the inner directory as the destination (magictest in the example).  Then the contents of trunk/softwareupdater/test should also be copied to this directory.  Once this is done, cd to this directory and run:

{{{
python test_updater.py <http://update.baseurl/location/>
}}}

The update base url location should be somewhere that is publicly accessible via http, and you should be able to copy files there as well.  Note that you are specifying a directory (which should be empty to start), and the trailing slash must be provided.  When this completes, there should be numerous folders in the outer directory you created (supertest in the example).

=== Copy Folders ===

Next, the folders that were created in the previous step must be copied over to the web location specified in the last step.

=== Run Tests ===

Finally, to run the tests, go back to the inner directory (magictest in the example), and run the command:

{{{
python test_runupdate.py <http://update.baseurl/location/>
}}}

The update base url location should be exactly the same as when you prepared the tests.  Note that on Windows, ps does not exist, so you will have to check manually that the softwareupdater is running in task manager.  Before updating, there should be a python process with the command line saying "python softwareupdater.py", and after each of the 2 updates there should be the same thing, but with random looking numbers at the end as well.  You can view the command line command that invoked the process by going to View->Select Columns...->Command Line.