= Proposal -- Seattle's Unit Test Framework =

----
[[TOC(inline)]]
----

[[BR]]
== Abstract ==
----
The purpose of this proposal is to gather as much feedback as possible with respect to the new testing framework. Please feel free to add any comments or concerns at the bottom of the page.

[[BR]]
== Requirements ==
----
Before diving into examples and use cases, I would like to specify requirements, so that users have a better understanding of what the goals are. 

 * Above everything, writing a unit test module should be simple and obvious for new users.
 * For a small test modules run-time should prevail over everything else. Having to prepare tests (using preparetests.py) before the execution is not a time effective solution. 
 * Test module should be able to have many small test cases and developer should be able to group them into test suites.
 * The framework should allow advanced users to perform non-trivial tests.
 * The framework should allow users to easily select what tests to run -- either a whole 
 * The framework back-end needs to be simple and extendible.

When translating requirements into objectives, we are faced with a non-trivial task, since some requirements are more important than others. As a result, advanced features are somewhat limited (for instance there is not support for test trees).

[[BR]]
=== Use Cases ===
----

The following examples are not meant to be complete test cases for a specific module, but instead, are there to demonstrate a specific feature.

=== Simple Use-Case ===

Now, let us consider s simple use case. We'll be designing a random number generator.

There are two methods defined:

{{{
#!python

def init_rng(seed):
def generate_next(rng):

}}}

[[BR]]
== Comments ==
----