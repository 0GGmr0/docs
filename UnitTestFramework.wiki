= Proposal -- Seattle's Unit Test Framework =

----
[[TOC(inline)]]
----

[[BR]]
== Abstract ==
----
The purpose of this proposal is to gather as much feedback as possible with respect to the new testing framework. Please feel free to add any comments or concerns at the bottom of the page.

[[BR]]
== Requirements ==
----
Before diving into examples and use cases, I would like to specify requirements, so that users have a better understanding of what the goals are. 

 * Above everything, writing a unit test module should be simple and obvious for new users.
 * For a small test modules run-time should prevail over everything else. Having to prepare tests (using preparetests.py) before the execution is not a time effective solution. 
 * Test module should be able to have many small test cases and developer should be able to group them into test suites.
 * The framework should allow advanced users to perform non-trivial tests.
 * The framework should allow users to easily select what tests to run -- either a whole 
 * The framework back-end needs to be simple and extendible.

When translating requirements into objectives, we are faced with a non-trivial task, since some requirements are more important than others. As a result, advanced features are somewhat limited (for instance there is not support for test trees).

[[BR]]
=== Use Cases ===
----

The following examples are not meant to be complete test cases (or to follow standard testing practices) for a specific module, but instead, are there to demonstrate a specific feature.

=== Trivial Use-Case ===

Now, let us consider s simple use case. We'll be designing a random number generator.

There are two methods defined:

{{{
#!python

def init_rng(seed):
def generate_next(rng):

}}}

And you want to test that given two random number generators with different seeds, they produce different results. Here is how you do it.

{{{
#!python

# Create a method that tests for a given objective.
def test_seed():
  seed1 = 32
  seed2 = 13

  rng1 = init(seed1)
  rng2 = init(seed2)

  next1 = generate_next(rng1)
  next2 = generate_next(rng2)

  # Make sure those two numbers are not the same.
  assertNotEqual(next1, next2)

# Register the test with our Unit Test Framework (UTF), by passing it
# the functor.
registerTest(test_seed)

}}}

==== Execution Monitor ====

All test files have to follow a strict naming convention: utf_test_<module name>_<optional>.py. Therefore, if you want to create a test file for a random number generator module, the test file should be called: utf_test_rng.py

When running tests, a developer is presented with three different possibilities:
 * Run all tests for all modules:

{{{
#!python

$ utf.py --all

}}}

 * Run all tests for a specific module

{{{
#!python

$ utf.py --module rng

}}}

 * Run a specific test case or a test suite for a specific module

{{{
#!python

$ utf.py --module rng --case test_seed

}}}

=== Simple Use-Case ===

Another, more complicated example, would be Roman Number <-> Arabic Number converter.

There are two functions defined:

{{{
#!python

def to_roman(number):
def from_roman(number):

}}}

Even though the logic behind this module is simple, testing is not. There are quite a few things we need to test for: valid input, invalid input, boundary cases, etc. Therefore, when dealing with more sophisticated unit tests, it might be useful to separate test cases in more test suites.

{{{
#!python

from_roman_bad_input = TestSuite()
from_roman_good_input = TestSuite()

to_roman_bad_input = TestSuite()
to_roman_good_input = TestSuite()

}}}

[[BR]]
== API ==
----

[[BR]]
== Comments ==
----