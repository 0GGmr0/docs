= Seattle's Unit Test Framework Alpha Documentation =

----
[[TOC(inline)]]
----

[[BR]]
== Abstract ==
----
The purpose of this document is to outline the most important features and to gather as much feedback as possible with respect to the new testing framework. We will be referring to Testing Unit Framework as UTF.

Please feel free to add any comments or concerns at the bottom of the page.

[[BR]]
== Requirements ==
----
Before diving into design and examples, I would like to specify requirements, so that the users have a better understanding of what the goals are. 

 * Above everything, writing a unit test module should be simple and obvious for new users.
 * Test module should be able to have many small test cases and developer should be able to group them into test suites.
 * The framework should allow advanced users to perform non-trivial tests.
 * The framework should allow users to easily select what tests to run (whole module or specific test cases).
 * The framework back-end needs to be simple and extensible.

When translating requirements into objectives, we are faced with a non-trivial task, since some requirements are more important than others. As a result, advanced features are somewhat limited (for instance there is not support for test trees).

[[BR]]
== Design ==
----
UTF behaves similarly to python's standard unittest library, with addition of several other features suitable for Seattle. Those are:

 * Testing within '''Repy execution environment'''.
 * Ability to specify different '''restrictions''' for different Repy test files.
 * Testing for '''standard out and standard error''' messages.
 * Support for '''setup and shutdown scripts'''.

Having this in mind, you are probably asking yourself: 'Well, how do I achieve this?'. Obviously, we need to be able to hint or to instruct the framework about our needs. Those instructions are embedded '''either in the file itself or the filename'''. Below, we discuss each aspect.

When instructing the UTF:

 * that the test file is suppose to be run inside the Repy execution environment,
 * or to use a non-default restrictions file,
 * or that the executed test has to produce a specific output on standard out or/and standard error

we need to use the following syntax withing the:

{{{
#!python

#DIRECTIVE TYPE [ARGS]
}}}

The directive name is always going to be '''pragma''' (a directive communicating additional "pragmatic" or implementation-specific information). Therefore, the more specific syntax is:

{{{
#!python

#pragma TYPE [ARGS]
}}}

The following #pragma directives are allowed. When an unknown #pragma directive is encountered, UTF reports an error.

{{{
#!python
"""
Instructs UTF that this test file is suppose to be run inside Repy execution environment. 
Restriction file argument is optional -- if not specified restrictions.default is used.
If this directives is omitted, UTF assumes that your test file is a standard Python
file.
"""
#pragma repy [RESTRICTIONS FILE]

"""
Instructs UTF that this test file is suppose to produce some output on standard out. 
If the TEXT argument is specified, UTF will try to find TEXT substring within standard out. 
If TEXT is not specified, UTF makes sure that the standard out data is not empty.
"""
#pragma out [TEXT]

"""
Instructs UTF that this test file is suppose to produce some output on standard error. 
If the TEXT argument is specified, UTF tries to find TEXT substring within standard error. 
If TEXT is not specified, UTF makes sure that the standard error data is not empty.
"""
#pragma error [TEXT]
}}}

[[BR]]
----
[[BR]]

Other features are encoded inside of the ''' filename'''. Those are:

 * Which module does the test file belong to.
 * Does the module have setup and shutdown scripts?
 * Whether or not the test file will be executed by default.

All test files have to follow a strict naming convention: 

{{{
#!python

ut_<module name>_<descriptor>.py.
}}}

A module can have multiple test files associated with it.

Furthermore, a module may contain two special descriptors: '''setup''' and '''shutdown'''. When running full module testing, ut_<module>_setup.py is executed at the '''beginning''' and ut_<module>_shutdown.py at the '''end''' of the execution. This is primarily used by more complicated modules, which require initialization and clean-up steps.

Test files with the above mentioned syntax are executed '''by default'''. To exclude them from default execution, '''prepend the filename with _'''. This way, the test file has to be executed '''explicitly'''.

[[BR]]
----
[[BR]]

When running tests, a developer is presented with three different possibilities:
 * Run all tests for all modules:

{{{
#!python

$ utf.py

}}}

 * Run all tests for a specific module

{{{
#!python

$ utf.py --module <module name>
$ utf.py -m <module name>

}}}

 * Run a specific test file.

{{{
#!python

$ utf.py --file <file>
$ utf.py -f <file>

}}}

[[BR]]
== Examples ==
----
The following examples are not meant to be complete test cases (or to follow standard testing practices) for some module, but instead, are there to demonstrate a specific feature.

[[BR]]
=== Standard Out Test ===
----
How do you test if an application produces the correct output? Well, define '''#pragma out''' directive with expected output.

{{{
#!python

#pragma out Hello Out.

print 'Hello Out.'
}}}

[[BR]]
=== Restrictions File & Standard Error ===
----
How do you verify that the restrictions file is behaving the way it should? First of all, you need to define the restriction file you want to use as repy pragma argument. Also, we have to make sure that the file throws an exception containing ''not allowed'' string.

The restriction file we are using does not allow function calls. Consequently, upon a function call, an exception will be thrown stating that we are not allowed to perform that action.

{{{
#!python

#pragma repy restrictions.callomit

#pragma err not allowed

sleep(1)

}}}

[[BR]]
=== Node Manager Example ===
----
Some software components require additional steps before and after the test execution. One such component is the node manager which is built around server-client architecture. As such, we need to initialize the state needed to run the node manager on the local node. 

Basically, all of the initialization code will be located inside __ut_nm_setup.py__ (formally known as nminit.py) file. This file is executed before any tests and it is also responsible for starting a local instance of node manager. Basically, here is what the file looks like.

{{{
#!python

#
import utfutil

# It initializes the state needed to run the node manager on the local node.
def initialize_state():
  ...



# Start the local instance.
def start_instance():
  identifier = 'nm_instance'
  args = ('python', 'nmmain.py')
  utfutil.spawn(args, identifier)




if __name__ == '__main__':
  initialize_state() 
  start_instance()

}}}

After all tests have finished, UTF will try to find and execute the shutdown script (__ut_nm_shutdown__). This script is responsible for deleting the initialization files and stopping the node manager instance. Here is what the file looks like:


{{{
#!python

#
import utfutil



# Stop the local instance.
def stop_instance():
  identifier = 'nm_instance'
  utfutil.kill(identifier)




if __name__ == '__main__':
  stop_instance()

}}}

