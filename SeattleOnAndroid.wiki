DISCLAIMER: For the moment, I'm only collecting my notes on this page. Any feedback (to ''albert.rafetseder at univie.ac.at'') is appreciated to make it work and then turn this page into an installation instruction like wiki:SeattleOnNokia

Running Repy scripts locally already works with a couple of patches, as does donating vessels and letting experimenters run code on them. The installation and registration for autostart still fails for various reasons. Sorry! The medium-term perspective is to build an Android Package (APK) that contains Python and the Seattle installer.

[http://cs.univie.ac.at/research/research-groups/future-communication/ Our] device here is a ZTE Blade Android 2.3 ("Gingerbread") phone running Cyanogenmod 7.

----

= Overview =
Here is a general outline of steps to be performed.
 1. Setting up Python. (I found this the hardest part.)
 1. Patching Seattle's {{{nix_common_api.py}}} so you can run scripts locally, and/or
 1. Patching Seattle's {{{nix_common_api.py}}} and {{{runonce.py}}} so you can run the installer which will configure the node manager (for donating resources).
 1. Running the node manager.

Currently, I don't know how to (correctly) setup Seattle for running at boot time, but we are working on this.


= Setting up Python =

As far as I know, you cannot install Python as a standalone app right now. Therefore, these steps cover the installation of the Scripting Layer for Android, into which the actual Python interpreter will be installed. ''(Note to self: Restore our phone from a plain image and try out all the steps. I'm pretty sure I'm forgetting something.) (Another note to self: Include links to the official installation instructions for SL4A and [http://code.google.com/p/android-scripting/wiki/InstallingInterpreters Py4A].)''

 1. On the home screen, press ''Menu''. Go to ''Settings > Applications'' and make sure ''Unknown Sources'' is checked. This is needed for installing non-Market APKs right after downloading them.
 1. Download the Scripting Layer for Android ([http://code.google.com/p/android-scripting/ SL4A]) from [http://android-scripting.googlecode.com/files/sl4a_r4.apk here]. Tap on the download notification to install.
 1. Download the Python 2.6.2 interpreter for Android ([Py4A]) from [http://code.google.com/p/android-scripting/downloads/detail?name=PythonForAndroid_r4.apk&can=2&q= here]. Again, tap on the download notification to install. Congratulations! You can now run Python code from within SL4A, either using scripts from files or an interactive interpreter.
 1. Undo Step 1 for obvious security reasons.

For running Repy programs locally, SL4A is not the optimal choice, but shell access to the Python interpreter is tricky to add because the shell knows nothing about Python's paths yet. Depending on which shell you have, there are different routes to take from here.

For {{{sh}}} (which is the default shell also greeting you via [http://developer.android.com/guide/developing/tools/adb.html adb]'s {{{shell}}} command), I don't know yet where it takes its run commands (.shrc) from. If you have [https://github.com/jackpal/Android-Terminal-Emulator/wiki Jackpal's AndroidTerm2] installed, you could write an rc script and configure !AndroidTerm to run it on startup: Press ''Menu'', go to ''Settings > Start command'' and enter /path/to/your/script.

For {{{bash}}}, add the following lines to {{{/system/etc/bash/bashrc}}} (Make sure /system/etc is mounted writable by issuing {{{mount -o rw,remount /system}}} as the superuser) :
{{{
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/data/data/com.googlecode.pythonforandroid/files/python/lib
export PYTHONPATH=/mnt/sdcard/com.googlecode.pythonforandroid/extras/python:/data/data/com.googlecode.pythonforandroid/files/python/lib/python2.6:/data/data/com.googlecode.pythonforandroid/files/python/lib/python2.6/lib-dynload
export PYTHONHOME=/data/data/com.googlecode.pythonforandroid/files/python
export TEMP=$TEMP:/mnt/sdcard/com.googlecode.pythonforandroid/extras/python/tmp/
export PATH=$PATH:/data/data/com.googlecode.pythonforandroid/files/python/bin
}}}

''(Note to self: Explain why some parts of the installation end up on /sdcard and others in /data/data. Search SL4A docs for hints how to move everything to one place.)''
(The last line is needed to make the {{{Popen}}} calls to the Python interpreter work). These lines are inspired by [http://code.google.com/p/python-for-android/source/browse/python-build/standalone_python.sh this file in the Py4A repository], but not all of their path names work on our phone. I'm not blaming the original authors -- pathnames are a botch in Android, everything shows up in multiple places (/etc == /system/etc and so on), and all of a sudden you find yourself on a device not supporting links (sdcard, its filesystem is VFAT) or mounted read-only but listed as temp directory.

On my installation with {{{bash}}}, the Python interpreter can now be run from any path in the filesystem, and can {{{import socket}}} etc.

You can now proceed to downloading Seattle.


= Seattle =
== General Installation Pitfalls ==
Download the Seattle Linux installer (it could be a customized installer as well). If you downloaded Seattle to the standard download folder on the SD card, it won't run even if correctly patched (stating "Bad interpreter: Permission denied") unless you remount the SD card with the {{{exec}}} option (as hinted [http://www.google.com/url?sa=t&source=web&cd=3&ved=0CDcQFjAC&url=http%3A%2F%2Fubuntuforums.org%2Fshowthread.php%3Ft%3D27138&ei=uQCyTcTYBsWZOt2-1PgI&usg=AFQjCNExH-jP9IMTAfbYdNgrWKZoXF_9iA here]). I rather moved the Seattle directory to {{{/data/data/edu.washington.cs.seattle/}}}, where the patched scripts can finally be started.

== Running Repy Scripts Locally ==
Put a restrictions file (e.g. the one from the [http://seattlegeni.cs.washington.edu/dist/demokit.zip Seattle demokit]) into your {{{seattle_repy}}} directory. Patch {{{nix_common_api.py}}} because {{{ctypes.util.find_library}}} fails on Android. ([http://docs.python.org/library/ctypes#finding-shared-libraries The Python docs] say find_library uses ldconfig, gcc, and objdump to locate the library, neither of which are available on our Android.) Here's the relevant patch (you'll probably need to adapt the {{{path/to/libc}}} on your device):
{{{
localhost seattle_repy # diff ../../seattle/seattle_repy/nix_common_api.py nix_common_api.py
--- ../../seattle/seattle_repy/nix_common_api.py
+++ nix_common_api.py
@@ -17,7 +17,7 @@
 import textops
 
 # Get the standard library
-libc = ctypes.CDLL(ctypes.util.find_library("c"))
+libc = ctypes.CDLL("/system/lib/libc.so")
 
 # Functions
 _strerror = libc.strerror
}}}

Congrats, now you can run {{{python repy.py restrictions.that_you_have your_script.repy}}}!

== Donating resources ==
Although installing Seattle through the install scripts doesn't work in all aspects right now, you can still donate resources by manually starting the node manager.

 1. If you didn't patch {{{nix_common_api.py}}} already, do it now, according to the patch above.
 1. Decide whom to donate your resources to. If you want to donate to the general public, proceed to the next step. To make sure you and your developer friends have access to the device, create a [https://seattlegeni.cs.washington.edu/custom_install/ customized installer] ([https://seattle.cs.washington.edu/wiki/CustomInstallerBuilder how to]) including everyone's public user keys. If you already have the Seattle files on your Android device, just overwrite the {{{vesselinfo}}} file with the version found in the customized installer.
 1. Check if {{{runonce.py}}} from the Seattle archive you extracted already includes the line {{{import tempfile}}}. Else grab a current version  [https://seattle.cs.washington.edu/export/4408/seattle/trunk/nodemanager/runonce.py (>=r4407) ] from SVN that doesn't [ticket:997 use a hardcoded temp directory].
 1. Run {{{python seattleinstaller.py}}}. You might want to increase the percentage of resources donated using e.g. {{{--percent 50}}}. On our phone, 10 percent of resources mean even [source:/trunk/repy/apps/allpairsping/allpairsping.repy allpairsping] needs to much RAM to run. The installer will claim it's installing on a Nokia N800/900 (due to it recognizing an ARM6 processor), and won't be able to configure Seattle for autostart. 
 1. You might want to run {{{python softwareupdater.py}}} now. Note that it will overwrite all your precious patched files, and I'm not quite sure how to find out that it has finished before you reapply the patches.
 1. Run {{{python nmmain.py}}}. It will take a while to register at the advertisement server.
 1. If you downloaded a customized installer that has your user key in the {{{vesselinfo}}} file, you can try to access your device using seash now.

-----

== Installing Seattle As A Service ==
DISCLAIMER: Don't follow these instructions as of now. This is unfinished work in progress. I'm not trying to "do the right thing" in every respect, but get Seattle on Android installed by adapting the Linux/Nokia-specific code paths.

The Seattle install.sh files (one in {{{seattle}}}, the other in {{{seattle/seattle_repy}}}) won't run out of the box as the shell is not located in {{{/bin/sh}}} on Android, but in {{{/system/bin/sh}}}. Patch the files according to the patches below.

{{{

localhost seattle # diff ../seattle/install.sh install.sh
--- ../seattle/install.sh
+++ install.sh
@@ -1,4 +1,4 @@
-#!/bin/sh
+#!/system/bin/sh
 
 cd "`echo $0 | sed 's/install.sh/seattle_repy/'`"
 ./install.sh $*



localhost seattle_repy # diff ../../seattle/seattle_repy/install.sh install.sh
--- ../../seattle/seattle_repy/install.sh
+++ install.sh
@@ -1,4 +1,4 @@
-#!/bin/sh
+#!/system/bin/sh
 which_out=`which python`
 if [ "$which_out" = "" ]; then
     echo seattle requires that python be installed on your computer.




localhost myseattle # diff ../seattle/start_seattle.sh start_seattle.sh 
--- ../seattle/start_seattle.sh
+++ start_seattle.sh
@@ -1,4 +1,4 @@
-#!/bin/sh
+#!/system/bin/sh
 
 cd "`echo $0 | sed 's/start_seattle.sh/seattle_repy/'`"
 ./start_seattle.sh
\ No newline at end of file




localhost seattle_repy # diff ../../seattle/seattle_repy/start_seattle.sh start_seattle.sh 
--- ../../seattle/seattle_repy/start_seattle.sh
+++ start_seattle.sh
@@ -1,4 +1,4 @@
-#!/bin/sh
+#!/system/bin/sh
 
 # Change to the seattle directory (this "cd" command allows the user to call the
 #   script from any directory.
}}}

=== Challenges To Overcome ===
 * The "Linux on ARMv6" target in seattleinstaller.py is tailored to Nokia N800/900. On Android, there is no /etc/rc2.d; you must be root and remount /etc read-writeable to edit init.d. (By the way, I had no luck with init.d at all.)
 * {{{cron}}} is missing on Android. The SL4A has "triggers", maybe these can be used.
 * Android {{{ps}}} is a very strange beast. It's really a link to {{{/system/bin/toolbox}}}, a busybox workalike, but doesn't find {{{python nmmain.py}}}. Busybox ps does however. Both are picky about their callargs.
