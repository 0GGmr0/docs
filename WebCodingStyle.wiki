= Web Code Style Guidelines for the Seattle project =

This guide explains how to format code for the Seattle project that implements functionality exposed to the web. This guide should be seen as '''complementary''' to the general [CodingStyle code style guidelines], so please read that document thoroughly before you continue with the content below. Please let Ivan know if you have suggestions or feedback.

----
[[TOC(inline)]]
----

This guide contains general rules of thumbs, as well as instructions on how to format specific types of web files used by Seattle. This guide is expected to evolve, and should not be considered complete.

[[BR]]
== Django applications ==
----

Django code is written in python, and falls under the purview of Seattle CodingStyle guidelines. However, Django is complex enough to warrant a few special cases.

[[BR]]
== Django models ==
----

  * Django model classes define the interface to the database. Additionally, these models '''document''' the database schema because Django automatically generates the database schema based on these models. Therefore is it critical to thoroughly document each class member and function in these classes. Here is an example:

  * In general, each class member will need at least a single commented line of explanation.

  * Each model class must define an __str__() method.  This method is used to generated a meaningful string representation of the model. This method is crucial for effective debugging of Django code.


[[BR]]
== Django templates ==
----

Django templates define a view on data generated by the Django application. Templates are written in a mix of HTML and Django templating language. Because there is no well-defined interface between templates and Django applications. This interface must be explicitly defined and maintained in comments maintained in the template file. It is important to maintain these comments in the template file because the template may be instantiated from different points in Django code, and may be used by different Django applications. All templates should include a header that defines all the variables expected by the template. Here is an example:

[[BR]]
== CSS and HTML web code ==
----

  * Prefer CSS to HTML tags. When both HTML and CSS offer ways to do the same thing, use CSS. CSS is easy to manage, change, and evolve. HTML is messy and terrible to maintain.

  * Relative positioning : in almost all cases you should use relative positioning on all Seattle web-pages. This means that your widths, heights, and other dimensions must be expressed in terms of percentages of their enclosing element.

  * Remember to separate logical portions of your CSS/HTML into sections/subsections. Use as many sections and comments as you need to achieve a granularity that will make it easier for someone else to understand your code.


[[BR]]
== CSS specifics ==
----

  * Use separate files for each aspect of the site. But do not use too many -- use good judgement. For example fonts, colors, and layout can be kept in separate files but do not do this for every tiny thing on the site.

  * Each CSS file should have a header that looks exactly like the following snippet:
{{{
#!C
/*****************************************************************
<File Name>
  documentation.css

<Started>
  December 15, 2008

<Author>
  ivan@cs.washington.edu
  Ivan Beschastnikh

<Purpose>
  Provides a printer-friendly documentation page

  Uses a hack to get IE6 fit paragraphs within div margins,
  and a hack to have IE7 display the print buttons correctly
  at the bottom of the page.

  As of January, 2008, this CSS file is being converted into a
  more generic style to provide printer-friendly support for other
  pages on the site.
*****************************************************************/
}}}

  * Your CSS file for a page should be structured in the order of XHTML elements in the page. If you have five divs in a row with ids "head", "navigation", "footer" then your CSS must include sections that are separated by comments that specify the section. In this comment, include any explanation that is necessary to understand the context around how the CSS is used on the page:
{{{
#!C
/***********************
* NAVIGATION
************************/
}}}


  * Use CSS Constants for faster development. One way to get round the lack of constants in CSS is to create definitions at the top of your CSS file in comments, to define ‘constants’. A common use for this is to create a ‘color glossary’. This means that you have a quick reference to the colors used in the site to avoid using alternates by mistake and, if you need to change the colors, you have a quick list to go down and do a search and replace. Example:
{{{
#!C
/***********************
* CSS CONSTANTS
************************
Dark grey (text): #333333
Dark Blue (headings, links) #000066
Mid Blue (header) #333399
Light blue (top navigation) #CCCCFF
Mid grey: #666666
*/
}}}

  * Main DIV must be used for all page content -- this will make it trivial to make complex changes later

  * Reset the default browser styles. Different browsers render pages with different default settings. This can lead to numerous problems. For example, get rid of default margins/paddings across all browsers and your margins and paddings will render the same across all of them. Here is example reset code you may use:
{{{
#!C
/*******************
* RESET
********************/
* { 
   margin:0;
   padding:0;
}
table {
   border-collapse:collapse;
   border-spacing:0;
}
fieldset,img { 
   border:0;
}
address,caption,cite,code,dfn,em,strong,th,var {
   font-style:normal;
   font-weight:normal;
}
ol,ul {
   list-style:none;
}
caption,th {
   text-align:left;
}
h1,h2,h3,h4,h5,h6 {
   font-size:100%;
   font-weight:normal;
}
q:before,q:after {
   content:'';
}
abbr,acronym {
   border:0;
}
}}}

  * If you add browser-specific hacks then do so with lots of comments. Explain exactly what the problem is; provide a link to an article that documents the problem (e.g. [http://en.wikipedia.org/wiki/Internet_Explorer_box_model_bug IE box model bug]); and then explain where you found your solution and how it works. Remember that a cryptic hack is the worst kind of hack.

  * Group CSS properties in an alphabetical order. For example:
{{{
#!C
body {  
    background: #fdfdfd;  
    color: #333;  
    font-size: 1em;  
    line-height: 1.4;  
    margin: 0;  
    padding: 0;  
}  
}}}

  * Indent changes you are not sure about. CSS code can be tricky and bugs are difficult to find. Therefore, whenever you make a change to an existing file: (1) indent the change, (2) comment the change with your name, date, and explanation of what you were trying to solve. Here's an example:
{{{
#!C
#sidebar ul li a {
   display: block;
   background-color: #ccc;
      border-bottom: 1px solid #999; /* ADDED Apr. 9, 2008 */
   margin: 3px 0 3px 0;
      padding: 3px;  /* CHANGED Feb. 14, 2008 (Prev. 1px) */
}
}}}


[[BR]]
== HTML specifics ==
----

  * Use comments around logical blocks of HTML so that anyone can navigate the page in a text editor.

  * Keep all HTML lines less than 80 characters long. Reading long lines is hard.

  * Always indent nested tags, and use 2 spaces for indentation.

  * Always declare the DOCTYPE

  * Head section needs to be minimal and include the following:
    * Title is set
    * Character set is included
    * Stylesheets are linked
    * Scripts are linked

  * Common content across pages must be included, not copied. Django provides simple templates to make this possible.

  * All pages must use proper ending tags -- do not ignore them, even if the page renders correctly.

  * Paragraphs must format text, use lists and labels if possible. Close all tags (e.g. <img .. />

  * Test your pages with a markup validation service (e.g. [http://validator.w3.org/ at w3]) to make sure that your pages are using valid markup.

[[BR]]
== See Also ==
----

There are numerous other resources for learning about effective style guidelines for coding in CSS\HTML and for web-programming more generally. Here are a few links:

  * CSS
    * http://www.smashingmagazine.com/2007/05/10/70-expert-ideas-for-better-css-coding/
    * http://www.onyx-design.net/weblog2/css/12-articles-and-tools-for-css-structuring-and-optimising/
    * http://woork.blogspot.com/2008/03/write-well-structured-css-file-without.html
    * http://www.smashingmagazine.com/2008/05/02/improving-code-readability-with-css-styleguides/
    * http://www.louddog.com/bloggity/2008/03/css-best-practices.php
    * http://css-tricks.com/indent-css-changes-you-are-unsure-about/
    * http://developer.yahoo.com/yui/reset/
    * http://www.sitepoint.com/dustmeselectors/

  * HTML
    * http://validator.w3.org/
    * https://addons.mozilla.org/en-US/firefox/addon/249
    * 