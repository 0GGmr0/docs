= Web Code Style Guidelines for the Seattle project =

This guide explains how to format code for the Seattle project that implements functionality exposed to the web. This guide should be seen as '''complementary''' to the general [CodingStyle code style guidelines], so please read that document thoroughly before you continue with the content below. Please let Ivan know if you have suggestions or feedback.

----
[[TOC(inline)]]
----

This guide contains general rules of thumbs, as well as instructions on how to format specific types of web files used by Seattle. This guide is expected to evolve, and should not be considered complete.

[[BR]]
== Code lay-out ==
----


[[BR]]
== Django applications ==
----

Django code is written in python, and falls under the purview of Seattle CodingStyle guidelines. However, Django is complex enough to warrant a few special cases.


[[BR]]
== Django models ==
----

Django model classes define the interface to the database. Additionally, these models '''document''' the database schema because Django automatically generates the database schema based on these models. Therefore is it critical to thoroughly document each class member and function in these classes. Here is an example:

In general, each class member will need at least a single commented line of explanation.

Each model class must define an __str__() method.  This method is used to generated a meaningful string representation of the model. This method is crucial for effective debugging of Django code.


[[BR]]
== Django templates ==
----

Django templates define a view on data generated by the Django application. Templates are written in a mix of HTML and Django templating language. Because there is no well-defined interface between templates and Django applications. This interface must be explicitly defined and maintained in comments maintained in the template file. It is important to maintain these comments in the template file because the template may be instantiated from different points in Django code, and may be used by different Django applications. All templates should include a header that defines all the variables expected by the template. Here is an example:


[[BR]]
== CSS ==
----

In almost all cases you should use relative positioning on all Seattle web-pages. This means that your widths, heights, and other dimensions must be expressed in terms of percentages of their enclosing element.


[[BR]]
== HTML ==
----


